category.names = c("Set 1" , "Set 2 " , "Set 3"),
filename = '#13_venn_diagramm.png',
output=TRUE
)
set4 <- NAc_effectAcrossGenotype$ensembl_gene_id[NAc_effectAcrossGenotype$remark %in% "significant"]
set5 <- NAc_WT$ensembl_gene_id[NAc_WT$remark %in% "significant"]
set6 <- NAc_Per1$ensembl_gene_id[NAc_Per1$remark %in% "significant"]
venn.diagram(
x = list(set4, set5, set6),
category.names = c("Set 1" , "Set 2 " , "Set 3"),
filename = '#13_venn_diagramm.png',
output=TRUE
)
?venn.diagram
set1 <- VTA_effectAcrossGenotype$ensembl_gene_id[VTA_effectAcrossGenotype$remark %in% "significant"]
set2 <- VTA_WT$ensembl_gene_id[VTA_WT$remark %in% "significant"]
set3 <- VTA_Per1$ensembl_gene_id[VTA_Per1$remark %in% "significant"]
venn.diagram(
x = list(set1, set2, set3),
category.names = c("Set 1" , "Set 2 " , "Set 3"),
filename = NULL,
output=TRUE
)
set1 <- VTA_effectAcrossGenotype$ensembl_gene_id[VTA_effectAcrossGenotype$remark %in% "significant"]
set2 <- VTA_WT$ensembl_gene_id[VTA_WT$remark %in% "significant"]
set3 <- VTA_Per1$ensembl_gene_id[VTA_Per1$remark %in% "significant"]
venn.plot <- venn.diagram(
x = list(set1, set2, set3),
category.names = c("Set 1" , "Set 2 " , "Set 3"),
filename = NULL,
output=TRUE
)
venn.plot
set1 <- VTA_effectAcrossGenotype$ensembl_gene_id[VTA_effectAcrossGenotype$remark %in% "significant"]
set2 <- VTA_WT$ensembl_gene_id[VTA_WT$remark %in% "significant"]
set3 <- VTA_Per1$ensembl_gene_id[VTA_Per1$remark %in% "significant"]
venn.plot <- venn.diagram(
x = list(set1, set2, set3),
category.names = c("Set 1" , "Set 2 " , "Set 3"),
filename = NULL,
output=TRUE
)
grid.draw(venn.plot)
venn.plot3 <- venn.diagram(
x = list(VTA.WT.genes, NAc.WT.genes),
category.names = c("VTA" , "NAc"),
filename = NULL
)
VTA.effect.genotype <- VTA_effectAcrossGenotype$ensembl_gene_id[VTA_effectAcrossGenotype$remark %in% "significant"]
VTA.WT.genes <- VTA_WT$ensembl_gene_id[VTA_WT$remark %in% "significant"]
VTA.Per1.genes <- VTA_Per1$ensembl_gene_id[VTA_Per1$remark %in% "significant"]
venn.plot1 <- venn.diagram(
x = list(VTA.effect.genotype, VTA.WT.genes, VTA.Per1.genes),
category.names = c("interaction" , "WT " , "Per1"),
filename = NULL,
output=TRUE
)
grid.draw(venn.plot1)
NAc.effect.genotype <- NAc_effectAcrossGenotype$ensembl_gene_id[NAc_effectAcrossGenotype$remark %in% "significant"]
NAc.WT.genes <- NAc_WT$ensembl_gene_id[NAc_WT$remark %in% "significant"]
NAc.Per1.genes <- NAc_Per1$ensembl_gene_id[NAc_Per1$remark %in% "significant"]
venn.plot2 <- venn.diagram(
x = list(NAc.effect.genotype, NAc.WT.genes, NAc.Per1.genes),
category.names = c("interaction" , "WT " , "Per1"),
filename = NULL
)
grid.draw(venn.plot2)
venn.plot3 <- venn.diagram(
x = list(VTA.WT.genes, NAc.WT.genes),
category.names = c("VTA" , "NAc"),
filename = NULL
)
grid.draw(venn.plot3)
grid.draw(venn.plot3)
venn.plot4 <- venn.diagram(
x = list(VTA.Per1.genes, NAc.Per1.genes),
category.names = c("VTA" , "NAc"),
filename = NULL
)
grid.draw(venn.plot4)
grid.draw(venn.plot4)
venn.plot5 <- venn.diagram(
x = list(NAc.effect.genotype, NAc.effect.genotype),
category.names = c("VTA" , "NAc"),
filename = NULL
)
grid.draw(venn.plot5)
grid.draw(venn.plot5)
venn.plot5 <- venn.diagram(
x = list(VTA.effect.genotype, NAc.effect.genotype),
category.names = c("VTA" , "NAc"),
filename = NULL
)
grid.draw(venn.plot5)
grid.draw(venn.plot5)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
# define the terms and model
# W.t1 <- W + N*C*tur*(W/N)*((N-W)/N)
# function to generate the dataframe with time and W.t1
df <- data.frame(0,0)
colnames(df) <- c("time","people.infected")
infectionStimulate <- function(W, N, C, tur){
t <- 0
W.t1 <- N*C*tur*(W/N)*(1-(W/N))
t <- t+1
data.point <- c(t, W.t1)
df <- rbind(df, data.point)
for (i in 2:100){
W.t1 <- W.t1 + N*C*tur*(df$people.infected[i]/N)*(1-(df$people.infected[i]/N))
t <- t+1
data.point <- c(t, W.t1)
df <- rbind(df, data.point)
}
return(df)
}
df <- infectionStimulate(5, 100, 0.4, 0.5)
# plot W.t1 over time
g <- ggplot(df, aes(x = time, y = people.infected)) + geom_line()
g
inputPanel(
numericInput("W", label = "inital number of infection",
min = 0, max = 100, value = 1, step = 1),
numericInput("N", label = "number of people in the community ",
value = 1000, min = 500, max = 10000000, step = 1000),
sliderInput("C", label = "contact rate per day",
min = 0, max = 1, value = 0.5, step = 0.1),
sliderInput("tur", label = "infection rate",
min = 0, max = 1, value = 0.5, step = 0.1)
)
renderPlot({
df <- infectionStimulate(input$W, input$N, input$C, input$tur)
ggplot(df, aes(x = time, y = people.infected)) + geom_line()
})
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
# define the terms and model
# W.t1 <- W + N*C*tur*(W/N)*((N-W)/N)
# function to generate the dataframe with time and W.t1
df <- data.frame(0,0)
colnames(df) <- c("time","people.infected")
infectionStimulate <- function(W, N, C, tur){
t <- 0
W.t1 <- N*C*tur*(W/N)*(1-(W/N))
t <- t+1
data.point <- c(t, W.t1)
df <- rbind(df, data.point)
for (i in 2:100){
W.t1 <- W.t1 + N*C*tur*(df$people.infected[i]/N)*(1-(df$people.infected[i]/N))
t <- t+1
data.point <- c(t, W.t1)
df <- rbind(df, data.point)
}
return(df)
}
df <- infectionStimulate(1, 1000, 1, 0.5)
# plot W.t1 over time
g <- ggplot(df, aes(x = time, y = people.infected)) + geom_line()
g
infectionStimulate <- function(W, N, C, tur){
t <- 0
W.t1 <- N*C*tur*(W/N)*(1-(W/N))
t <- t+1
data.point <- c(t, W.t1)
df <- rbind(df, data.point)
for (i in 2:100){
W.t1 <- W.t1 + N*C*tur*(df$people.infected[i]/N)*(1-(df$people.infected[i]/N))
t <- t+1
data.point <- c(t, W.t1)
df <- rbind(df, data.point)
}
return(df)
}
df <- infectionStimulate(2, 4500, 1, 0.5)
# plot W.t1 over time
g <- ggplot(df, aes(x = time, y = people.infected)) + geom_line()
g
library(ggplot2)
# define the terms and model
# W.t1 <- W + N*C*tur*(W/N)*((N-W)/N)
# function to generate the dataframe with time and W.t1
df <- data.frame(0,0)
colnames(df) <- c("time","people.infected")
infectionStimulate <- function(W, N, C, tur){
t <- 0
W.t1 <- N*C*tur*(W/N)*(1-(W/N))
t <- t+1
data.point <- c(t, W.t1)
df <- rbind(df, data.point)
for (i in 2:100){
W.t1 <- W.t1 + N*C*tur*(df$people.infected[i]/N)*(1-(df$people.infected[i]/N))
t <- t+1
data.point <- c(t, W.t1)
df <- rbind(df, data.point)
}
return(df)
}
df <- infectionStimulate(2, 4500, 1, 0.5)
# plot W.t1 over time
g <- ggplot(df, aes(x = time, y = people.infected)) + geom_line()
g
library(ggplot2)
# define the terms and model
# W.t1 <- W + N*C*tur*(W/N)*((N-W)/N)
# function to generate the dataframe with time and W.t1
infectionStimulate <- function(W, N, C, tur){
df <- data.frame(0,0)
colnames(df) <- c("time","people.infected")
t <- 0
W.t1 <- N*C*tur*(W/N)*(1-(W/N))
t <- t+1
data.point <- c(t, W.t1)
df <- rbind(df, data.point)
for (i in 2:100){
W.t1 <- W.t1 + N*C*tur*(df$people.infected[i]/N)*(1-(df$people.infected[i]/N))
t <- t+1
data.point <- c(t, W.t1)
df <- rbind(df, data.point)
}
return(df)
}
df <- infectionStimulate(2, 4500, 1, 0.5)
# plot W.t1 over time
g <- ggplot(df, aes(x = time, y = people.infected)) + geom_line()
g
setwd("~/Desktop/brainRNASeq/R_analysis/R_output/topGO/NAc")
library(ggplot2)
library(dplyr)
fisher <- read.csv("BP/NAc_all_comparsion_BP_fisher.csv", header = TRUE, stringsAsFactors = FALSE)
g <- ggplot(fisher, aes(x= Term, y = cassicFisher)) + geom_bar(stat = "identity")
g
g <- ggplot(fisher, aes(x= Term, y = classicFisher)) + geom_bar(stat = "identity")
g
g <- ggplot(fisher, aes(x= Term, y = classicFisher)) + geom_bar(stat = "identity")
g + coord_flip()
g <- ggplot(fisher, aes(x= Term, y = log10(classicFisher)) + geom_bar(stat = "identity")
g + coord_flip()
g <- ggplot(fisher, aes(x= Term, y = log10(classicFisher))) + geom_bar(stat = "identity")
g + coord_flip()
g <- ggplot(fisher, aes(x= Term, y = -log10(classicFisher))) + geom_bar(stat = "identity")
g + coord_flip()
g <- ggplot(fisher, aes(x= Term, y = -log10(classicFisher))) + geom_bar(stat = "identity")
g + coord_flip() + xlab("-log(p-value)") + ylab("GO term")
g <- ggplot(fisher, aes(x= Term, y = -log10(classicFisher))) + geom_bar(stat = "identity")
g + coord_flip() + ylab("-log(p-value)") + xlab("GO term")
library(topGO)
library(dplyr)
library(tidyr)
library(genefilter)
library(ggplot2)
# Prepare the list of gene of interest and the list of the background
# set working directory
setwd("~/Desktop/brainRNASeq/R_analysis/R_output/results_tables/")
# read in the file with the normalized data
result <- read.csv("VTA/VTA_WT_lightvsControl.csv", header = TRUE,
stringsAsFactors = FALSE)
result$remark <- as.factor(result$remark)
# subset the genes of interest
gene.of.interest <- result[(result$remark %in% "significant") |
(result$remark %in% "significant & more than 1-fold"),]
# remove duplicated rows
gene.of.interest <- unique(gene.of.interest)
# define the gene background
# remove duplicated rows with different mgi_symbol but the same ensembl_gene_id
duplicate.row <- result[duplicated(result$ensembl_gene_id), ]
duplicate.row.list <- as.numeric(rownames(duplicate.row))
result.unique <- result[- duplicate.row.list, ]
rownames(result.unique) <- result.unique$ensembl_gene_id
gene.of.interest.list <- gene.of.interest$ensembl_gene_id
gene.of.interest.list <- unique(gene.of.interest.list)
overall.base.mean <- as.matrix(result.unique[,"baseMean", drop = F])
gene.background <- genefinder(overall.base.mean, gene.of.interest.list,
10, method = "euc")
gene.background <- rownames(overall.base.mean)[as.vector(sapply(gene.background,
function(x)x$indices))]
gene.background <- setdiff(gene.background, gene.of.interest$ensembl_gene_id)
gene.universe.list <- unique(c(gene.background, gene.of.interest.list))
gene.list <- factor(as.integer(gene.universe.list %in% gene.of.interest.list))
names(gene.list) <- gene.universe.list
library(RColorBrewer)
library(cancerTiming)
all.gene <- log2(result.unique$baseMean)
gene.selected <- log2(result.unique[gene.of.interest$ensembl_gene_id,"baseMean"])
background <- log2(result.unique[gene.background, "baseMean"])
multidensity(list(all = all.gene, fore = gene.selected, back = background),
xlab="log2 mean counts", main = "Matching for enrichment analysis")
legend("topright", legend = c("All gene", "Gene of interest","background"),
col = c("black","green","red"),
lwd=1)
GO.data <- new ("topGOdata", ontology ="BP", allGenes = gene.list,
annot=annFUN.org, mapping="org.Mm.eg.db", ID = "ensembl")
# perform the classic Fisher test
fisher.test <- runTest(GO.data, algorithm = "classic", statistic = "Fisher")
fisher.result <- GenTable(GO.data, classicFisher = fisher.test,
ranksOf = "classicFisher",
topNodes = 10)
par(cex = 0.6)
showSigOfNodes(GO.data, score(fisher.test), firstSigNodes = 5, useInfo = "all")
g <- ggplot(fisher.result, aes(x= Term, y = -log10(classicFisher))) + geom_bar(stat = "identity")
g + coord_flip() + ylab("-log(p-value)") + xlab("GO term")
fisher.result$classicFisher <- as.numeric(fisher.result$classicFisher)
g <- ggplot(fisher.result, aes(x= Term, y = -log10(classicFisher))) + geom_bar(stat = "identity")
g + coord_flip() + ylab("-log(p-value)") + xlab("GO term")
View(fisher.result)
View(fisher.result)
?order
fisher.result$classicFisher <- as.numeric(fisher.result$classicFisher)
fisher.result <- fisher.result[rank(fisher.result$classicFisher),]
g <- ggplot(fisher.result, aes(x= Term, y = -log10(classicFisher))) + geom_bar(stat = "identity")
g + coord_flip() + ylab("-log(p-value)") + xlab("GO term")
library(topGO)
library(dplyr)
library(tidyr)
library(genefilter)
library(ggplot2)
# Prepare the list of gene of interest and the list of the background
# set working directory
setwd("~/Desktop/brainRNASeq/R_analysis/R_output/results_tables/")
# read in the file with the normalized data
result <- read.csv("NAc/NAc_WT_lightvsControl.csv", header = TRUE,
stringsAsFactors = FALSE)
result$remark <- as.factor(result$remark)
# subset the genes of interest
gene.of.interest <- result[(result$remark %in% "significant") |
(result$remark %in% "significant & more than 1-fold"),]
# remove duplicated rows
gene.of.interest <- unique(gene.of.interest)
# define the gene background
# remove duplicated rows with different mgi_symbol but the same ensembl_gene_id
duplicate.row <- result[duplicated(result$ensembl_gene_id), ]
duplicate.row.list <- as.numeric(rownames(duplicate.row))
result.unique <- result[- duplicate.row.list, ]
rownames(result.unique) <- result.unique$ensembl_gene_id
gene.of.interest.list <- gene.of.interest$ensembl_gene_id
gene.of.interest.list <- unique(gene.of.interest.list)
overall.base.mean <- as.matrix(result.unique[,"baseMean", drop = F])
gene.background <- genefinder(overall.base.mean, gene.of.interest.list,
10, method = "euc")
gene.background <- rownames(overall.base.mean)[as.vector(sapply(gene.background,
function(x)x$indices))]
gene.background <- setdiff(gene.background, gene.of.interest$ensembl_gene_id)
gene.universe.list <- unique(c(gene.background, gene.of.interest.list))
gene.list <- factor(as.integer(gene.universe.list %in% gene.of.interest.list))
names(gene.list) <- gene.universe.list
library(RColorBrewer)
library(cancerTiming)
all.gene <- log2(result.unique$baseMean)
gene.selected <- log2(result.unique[gene.of.interest$ensembl_gene_id,"baseMean"])
background <- log2(result.unique[gene.background, "baseMean"])
multidensity(list(all = all.gene, fore = gene.selected, back = background),
xlab="log2 mean counts", main = "Matching for enrichment analysis")
legend("topright", legend = c("All gene", "Gene of interest","background"),
col = c("black","green","red"),
lwd=1)
GO.data <- new ("topGOdata", ontology ="BP", allGenes = gene.list,
annot=annFUN.org, mapping="org.Mm.eg.db", ID = "ensembl")
# perform the classic Fisher test
fisher.test <- runTest(GO.data, algorithm = "classic", statistic = "Fisher")
fisher.result <- GenTable(GO.data, classicFisher = fisher.test,
ranksOf = "classicFisher",
topNodes = 10)
par(cex = 0.6)
showSigOfNodes(GO.data, score(fisher.test), firstSigNodes = 5, useInfo = "all")
fisher.result$classicFisher <- as.numeric(fisher.result$classicFisher)
fisher.result <- fisher.result[rank(fisher.result$classicFisher),]
g <- ggplot(fisher.result, aes(x= Term, y = -log10(classicFisher))) + geom_bar(stat = "identity")
g + coord_flip() + ylab("-log(p-value)") + xlab("GO term")
View(fisher.result)
rank(fisher.result$classicFisher)
fisher.result$classicFisher <- as.numeric(fisher.result$classicFisher)
g <- ggplot(fisher.result, aes(x= reorder(Term, -classicFisher), y = -log10(classicFisher))) + geom_bar(stat = "identity")
g + coord_flip() + ylab("-log(p-value)") + xlab("GO term")
fisher.result$classicFisher <- as.numeric(fisher.result$classicFisher)
g <- ggplot(fisher.result, aes(x= reorder(Term, -classicFisher), y = -log10(classicFisher))) + geom_bar(stat = "identity")
g + coord_flip() + ylab("-log(p-value)") + xlab("GO term")
g  +  theme(text = element_text(size=16),
panel.background = element_rect(fill = NA),
axis.line = element_line(size = 0.8, colour = "black"),
axis.ticks = element_line(size = 1),
legend.position = c(0.89, 0.90),
legend.key = element_rect(size = 0.5, fill = "white", colour = "black"),
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5))
fisher.result$classicFisher <- as.numeric(fisher.result$classicFisher)
g <- ggplot(fisher.result, aes(x= reorder(Term, -classicFisher), y = -log10(classicFisher))) + geom_bar(stat = "identity")
g  + ylab("-log(p-value)")
g  +  theme(text = element_text(size=16),
panel.background = element_rect(fill = NA),
axis.line = element_line(size = 0.8, colour = "black"),
axis.ticks = element_line(size = 1),
legend.position = c(0.89, 0.90),
legend.key = element_rect(size = 0.5, fill = "white", colour = "black"),
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5))
g + coord_flip()
fisher.result$classicFisher <- as.numeric(fisher.result$classicFisher)
g <- ggplot(fisher.result, aes(x= reorder(Term, -classicFisher), y = -log10(classicFisher))) + geom_bar(stat = "identity")
g  + ylab("-log(p-value)")
g  +  theme_classic() + coord_flip()
fisher.result$classicFisher <- as.numeric(fisher.result$classicFisher)
g <- ggplot(fisher.result, aes(x= reorder(Term, -classicFisher), y = -log10(classicFisher))) + geom_bar(stat = "identity")
g  + ylab("-log(p-value)") + xlab("")
g  +  theme_classic() + coord_flip()
fisher.result$classicFisher <- as.numeric(fisher.result$classicFisher)
g <- ggplot(fisher.result, aes(x= reorder(Term, -classicFisher), y = -log10(classicFisher))) + geom_bar(stat = "identity")
g  + ylab("-log(p-value)") + xlab(" ")
g  +  theme_classic() + coord_flip()
fisher.result$classicFisher <- as.numeric(fisher.result$classicFisher)
g <- ggplot(fisher.result, aes(x= reorder(Term, -classicFisher), y = -log10(classicFisher))) + geom_bar(stat = "identity")
g  +  theme_classic() + coord_flip() + ylab("-log(p-value)") + xlab(" ")
fisher.result$classicFisher <- as.numeric(fisher.result$classicFisher)
g <- ggplot(fisher.result, aes(x= reorder(Term, -classicFisher), y = -log10(classicFisher))) + geom_bar(stat = "identity")
g   +  theme(text = element_text(size=16),
panel.background = element_rect(fill = NA)) + coord_flip() + ylab("-log(p-value)") + xlab(" ")
fisher.result$classicFisher <- as.numeric(fisher.result$classicFisher)
g <- ggplot(fisher.result, aes(x= reorder(Term, -classicFisher), y = -log10(classicFisher))) + geom_bar(stat = "identity")
g   +  theme(text = element_text(size=16),
panel.background = element_rect(fill = NA),
axis.line = element_line(size = 0.8, colour = "black"),
axis.ticks = element_line(size = 1)) + coord_flip() + ylab("-log(p-value)") + xlab(" ")
library(topGO)
library(dplyr)
library(tidyr)
library(genefilter)
library(ggplot2)
# Prepare the list of gene of interest and the list of the background
# set working directory
setwd("~/Desktop/brainRNASeq/R_analysis/R_output/results_tables/")
# read in the file with the normalized data
result <- read.csv("NAc/NAc_WT_lightvsControl.csv", header = TRUE,
stringsAsFactors = FALSE)
result$remark <- as.factor(result$remark)
# subset the genes of interest
gene.of.interest <- result[(result$remark %in% "significant") |
(result$remark %in% "significant & more than 1-fold"),]
# remove duplicated rows
gene.of.interest <- unique(gene.of.interest)
# define the gene background
# remove duplicated rows with different mgi_symbol but the same ensembl_gene_id
duplicate.row <- result[duplicated(result$ensembl_gene_id), ]
duplicate.row.list <- as.numeric(rownames(duplicate.row))
result.unique <- result[- duplicate.row.list, ]
rownames(result.unique) <- result.unique$ensembl_gene_id
gene.of.interest.list <- gene.of.interest$ensembl_gene_id
gene.of.interest.list <- unique(gene.of.interest.list)
overall.base.mean <- as.matrix(result.unique[,"baseMean", drop = F])
gene.background <- genefinder(overall.base.mean, gene.of.interest.list,
10, method = "euc")
gene.background <- rownames(overall.base.mean)[as.vector(sapply(gene.background,
function(x)x$indices))]
gene.background <- setdiff(gene.background, gene.of.interest$ensembl_gene_id)
gene.universe.list <- unique(c(gene.background, gene.of.interest.list))
gene.list <- factor(as.integer(gene.universe.list %in% gene.of.interest.list))
names(gene.list) <- gene.universe.list
library(RColorBrewer)
library(cancerTiming)
all.gene <- log2(result.unique$baseMean)
gene.selected <- log2(result.unique[gene.of.interest$ensembl_gene_id,"baseMean"])
background <- log2(result.unique[gene.background, "baseMean"])
multidensity(list(all = all.gene, fore = gene.selected, back = background),
xlab="log2 mean counts", main = "Matching for enrichment analysis")
legend("topright", legend = c("All gene", "Gene of interest","background"),
col = c("black","green","red"),
lwd=1)
GO.data <- new ("topGOdata", ontology ="BP", allGenes = gene.list,
annot=annFUN.org, mapping="org.Mm.eg.db", ID = "ensembl")
# perform the classic Fisher test
fisher.test <- runTest(GO.data, algorithm = "classic", statistic = "Fisher")
fisher.result <- GenTable(GO.data, classicFisher = fisher.test,
ranksOf = "classicFisher",
topNodes = 10)
# perform the  elim Fisher test
elim.fisher.test <- runTest(GO.data, algorithm = "elim", statistic = "Fisher")
elim.fisher.result <- GenTable(GO.data, elimFisher = elim.fisher.test,
ranksOf = "elimFisher",
topNodes = 10)
fisher.result$classicFisher <- as.numeric(fisher.result$classicFisher)
g <- ggplot(fisher.result, aes(x= reorder(Term, -classicFisher), y = -log10(classicFisher))) + geom_bar(stat = "identity")
g   +  theme(text = element_text(size=16),
panel.background = element_rect(fill = NA),
axis.line = element_line(size = 0.8, colour = "black"),
axis.ticks = element_line(size = 1)) + coord_flip() + ylab("-log(p-value)") + xlab(" ")
fisher.result$classicFisher <- as.numeric(fisher.result$classicFisher)
g2 <- ggplot(elim.fisher.result, aes(x= reorder(Term, -classicFisher), y = -log10(classicFisher))) + geom_bar(stat = "identity")
g2   +  theme(text = element_text(size=16),
panel.background = element_rect(fill = NA),
axis.line = element_line(size = 0.8, colour = "black"),
axis.ticks = element_line(size = 1)) + coord_flip() + ylab("-log(p-value)") + xlab(" ")
fisher.result$classicFisher <- as.numeric(fisher.result$classicFisher)
g2 <- ggplot(elim.fisher.result, aes(x= reorder(Term, -classicFisher), y = -log10(elimFisher))) + geom_bar(stat = "identity")
g2   +  theme(text = element_text(size=16),
panel.background = element_rect(fill = NA),
axis.line = element_line(size = 0.8, colour = "black"),
axis.ticks = element_line(size = 1)) + coord_flip() + ylab("-log(p-value)") + xlab(" ")
fisher.result$classicFisher <- as.numeric(fisher.result$classicFisher)
g2 <- ggplot(elim.fisher.result, aes(x= reorder(Term, -elimFisher), y = -log10(elimFisher))) + geom_bar(stat = "identity")
g2   +  theme(text = element_text(size=16),
panel.background = element_rect(fill = NA),
axis.line = element_line(size = 0.8, colour = "black"),
axis.ticks = element_line(size = 1)) + coord_flip() + ylab("-log(p-value)") + xlab(" ")
fisher.result$classicFisher <- as.numeric(fisher.result$classicFisher)
g2 <- ggplot(elim.fisher.result, aes(x= reorder(Term, -elimFisher), y = -log10(elimFisher))) + geom_bar(stat = "identity")
g2 + theme(text = element_text(size=16),
panel.background = element_rect(fill = NA),
axis.line = element_line(size = 0.8, colour = "black"),
axis.ticks = element_line(size = 1)) + coord_flip() + ylab("-log(p-value)") + xlab(" ")
elim.fisher.result$elimFisher <- as.numeric(elim.fisher.result$elimFisher)
g2 <- ggplot(elim.fisher.result, aes(x= reorder(Term, -elimFisher), y = -log10(elimFisher))) + geom_bar(stat = "identity")
g2 + theme(text = element_text(size=16),
panel.background = element_rect(fill = NA),
axis.line = element_line(size = 0.8, colour = "black"),
axis.ticks = element_line(size = 1)) + coord_flip() + ylab("-log(p-value)") + xlab(" ")
