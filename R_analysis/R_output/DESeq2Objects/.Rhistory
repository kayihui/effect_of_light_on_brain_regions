for (i in 1:length(TopExpress$ensembl_gene_id)){
g <- ggplot(res8[res8$ensembl_gene_id %in% TopExpress$ensembl_gene_id[i], ], aes(x=experiment, y = n)) + geom_dotplot(binaxis = "y") + ggtitle(TopExpress$mgi_symbol[i])
print(g)
}
res7 <- assay(dds)
res7 <- as.data.frame(assay(dds))
res7$ensembl_gene_id <- sapply (strsplit(rownames(res7), split="\\+"), "[", 1)
res7 <- gather(res7, key = "sample", n, 1:24)
res7 <- left_join(res7, sampleTable, by = "sample" )
genesOfInterest <- topVarGenes$ensembl_gene_id
res8 <- res7[res7$ensembl_gene_id %in% genesOfInterest, ]
res7$ensembl_gene_id %in% genesOfInterest
res7 <- assay(dds)
res7$ensembl_gene_id %in% genesOfInterest
res7[genesOfInterest,]
res7 <- assay(dds)
res7 <- res7[genesOfInterest,]
res7 <- as.data.frame(assay(dds))
res7$ensembl_gene_id <- sapply (strsplit(rownames(res7), split="\\+"), "[", 1)
res7 <- gather(res7, key = "sample", n, 1:24)
res7 <- left_join(res7, sampleTable, by = "sample" )
res8 <- select(res8, -file_name)
res8 <- mutate(res8, "experiment" = paste(genotype, condition, sep = "-"))
res8$experiment <- as.factor(res8$experiment)
res8$experiment <- factor(res8$experiment,levels = c("WT-control", "WT-light_induced", "Per1-control", "Per1-light_induced"))
TopExpress <- topVarGenes
TopExpress$baseMean <- order(topVarGenes$baseMean, decreasing = TRUE)
res7 <- assay(dds)
res7 <- res7[genesOfInterest,]
res7 <- as.data.frame(res7)
res7$ensembl_gene_id <- sapply (strsplit(rownames(res7), split="\\+"), "[", 1)
res7 <- gather(res7, key = "sample", n, 1:24)
res7 <- left_join(res7, sampleTable, by = "sample" )
res8 <- select(res8, -file_name)
res7 <- assay(dds)
res7 <- res7[genesOfInterest,]
res7 <- as.data.frame(res7)
res7$ensembl_gene_id <- sapply (strsplit(rownames(res7), split="\\+"), "[", 1)
res7 <- gather(res7, key = "sample", n, 1:24)
res8 <- left_join(res7, sampleTable, by = "sample" )
res8 <- select(res8, -file_name)
res8 <- mutate(res8, "experiment" = paste(genotype, condition, sep = "-"))
res8$experiment <- as.factor(res8$experiment)
res8$experiment <- factor(res8$experiment,levels = c("WT-control", "WT-light_induced", "Per1-control", "Per1-light_induced"))
TopExpress <- topVarGenes
TopExpress$baseMean <- order(topVarGenes$baseMean, decreasing = TRUE)
for (i in 1:length(TopExpress$ensembl_gene_id)){
g <- ggplot(res8[res8$ensembl_gene_id %in% TopExpress$ensembl_gene_id[i], ], aes(x=experiment, y = n)) + geom_dotplot(binaxis = "y") + ggtitle(TopExpress$mgi_symbol[i])
print(g)
}
g <- ggplot(res8[res8$ensembl_gene_id %in% TopExpress$ensembl_gene_id[1], ], aes(x=experiment, y = n)) + geom_dotplot(binaxis = "y") + ggtitle(TopExpress$mgi_symbol[1])
print(g)
res7 <- assay(dds)
res7 <- res7[genesOfInterest,]
res7 <- as.data.frame(res7)
res7$ensembl_gene_id <- sapply (strsplit(rownames(res7), split="\\+"), "[", 1)
res7 <- gather(res7, key = "sample", n, 1:24)
head(res7)
# load all the required libraries
library(DESeq2)
library(tximport)
library(readr)
library(ggplot2)
library(vsn)
library(rhdf5)
library(fdrtool)
library(genefilter)
library(gplots)
library(topGO)
library(RColorBrewer)
library(tidyr)
library(dplyr)
source('~/Desktop/Jurgen RNAseq project/add_gene_info.r')
source('~/Desktop/Jurgen RNAseq project/TopGOanaylsis.R')
# set the working directory
setwd("~/Desktop/Jurgen RNAseq project")
# define the directory with the kallisto output
dir <- "~/Desktop/Jurgen RNAseq project"
# read the csv file containing the metadata
sampleTable <- read_csv("meta_data_LHb.csv")
# get the paths of the files of all the kallisto outputs and test if the files exists
files <- file.path(dir, "without_bootstrap", sampleTable$file_name, "abundance.h5")
names(files) <- sampleTable$sample
file.exists(files)
# the gene map will be the same with all the data frame for annotations
genemap <- read.csv("genemap.csv", header = TRUE, stringsAsFactors = FALSE)
# read in the files with the transcipt ID to gene ID
tx2gene <- read_csv("tx2gene.csv")
# use tximport to combine the abundance files, and conventing the transcript ID to gene ID
txi <- tximport(files, type = "kallisto", tx2gene = tx2gene)
# creating the DESeq object and further analysis
ExpDesign <- ~ genotype + condition + genotype:condition
dds <- DESeqDataSetFromTximport(txi, sampleTable, design = ExpDesign)
# relevel to make sure that the reference is 'WT'
dds$genotype <- relevel(dds$genotype, "WT")
# Pre-filtering out the genes that have too low expression
dds <- dds[ rowSums(counts(dds)) > 25, ]
#creating the dds object
dds <- DESeq(dds)
resultsNames(dds)
plotDispEsts( dds, ylim = c(1e-6, 1e1))
# load all the required libraries
library(DESeq2)
library(tximport)
library(readr)
library(ggplot2)
library(vsn)
library(rhdf5)
library(fdrtool)
library(genefilter)
library(gplots)
library(topGO)
library(RColorBrewer)
library(tidyr)
library(dplyr)
source('~/Desktop/Jurgen RNAseq project/add_gene_info.r')
source('~/Desktop/Jurgen RNAseq project/TopGOanaylsis.R')
# set the working directory
setwd("~/Desktop/Jurgen RNAseq project")
# define the directory with the kallisto output
dir <- "~/Desktop/Jurgen RNAseq project"
# read the csv file containing the metadata
sampleTable <- read_csv("meta_data_LHb.csv")
# get the paths of the files of all the kallisto outputs and test if the files exists
files <- file.path(dir, "without_bootstrap", sampleTable$file_name, "abundance.h5")
names(files) <- sampleTable$sample
file.exists(files)
# the gene map will be the same with all the data frame for annotations
genemap <- read.csv("genemap.csv", header = TRUE, stringsAsFactors = FALSE)
# read in the files with the transcipt ID to gene ID
tx2gene <- read_csv("tx2gene.csv")
# use tximport to combine the abundance files, and conventing the transcript ID to gene ID
txi <- tximport(files, type = "kallisto", tx2gene = tx2gene)
# creating the DESeq object and further analysis
ExpDesign <- ~ genotype + condition + genotype:condition
dds <- DESeqDataSetFromTximport(txi, sampleTable, design = ExpDesign)
# relevel to make sure that the reference is 'WT'
dds$genotype <- relevel(dds$genotype, "WT")
# Pre-filtering out the genes that have too low expression
dds <- dds[ rowSums(counts(dds)) > 25, ]
#creating the dds object
dds <- DESeq(dds)
library()
install.packages("googlesheets")
library(googlesheets)
gs_auth()
gs_ls()
gs_ls()
SCN <- gs_title("SCN_count_ready_for_plot")
countData_SCN <- gs_read_csv(SCN)
countData_SCN$experiment <- as.factor(countData_SCN$experiment)
countData_SCN$experiment <- factor(countData_SCN$experiment,
levels = c("WT-control", "WT-light_induced",
"Per1-control", "Per1-light_induced"))
gs_auth(new_user = TRUE)
ttt <- gs_auth()
View(ttt)
saveRDS(ttt,ttt.rds)
saveRDS(ttt,"ttt.rds")
View(ttt)
gs_auth(token = "ttt.rds")
gs_auth(token = ttt)
sidebarPanel(
inputPanel(
textInput("geneName", label = "Please enter the gene name:", value = "Gnai3")
))
mainPanel(
verticalLayout(
renderPlot({
countDataPlot_SCN <- countData_SCN[countData_SCN$mgi_symbol %in% {input$geneName}, ]
ggplot(countDataPlot_SCN, aes(x=experiment, y = n)) + geom_dotplot(binaxis = "y") + ggtitle("SCN")}),
renderPlot({
countDataPlot_VTA <- countData_VTA[countData_VTA$mgi_symbol %in% {input$geneName}, ]
ggplot(countDataPlot_VTA, aes(x=experiment, y = n)) + geom_dotplot(binaxis = "y") + ggtitle("VTA")}),
renderPlot({
countDataPlot_LHb <- countData_LHb[countData_LHb$mgi_symbol %in% {input$geneName}, ]
ggplot(countDataPlot_LHb, aes(x=experiment, y = n)) + geom_dotplot(binaxis = "y") + ggtitle("LHb")}),
renderPlot({
countDataPlot_NAc <- countData_NAc[countData_NAc$mgi_symbol %in% {input$geneName}, ]
ggplot(countDataPlot_NAc, aes(x=experiment, y = n)) + geom_dotplot(binaxis = "y") + ggtitle("NAc")})
)
)
library(biomaRt)
ensembl <- useMart("ensembl", dataset="mmusculus_gene_ensembl")
goInfo <-getBM(attributes = c("go_id","definition_1006", "name_1006"), mart=ensembl)
sessionInfo()
library(topGO)
?`topGO-package`
library(topGO)
library(dplyr)
library(tidyr)
library(RColorBrewer)
library(genefilter)
library(cancerTiming)
# set working directory
setwd("~/Desktop/Jurgen RNAseq project/VTA results")
#read in the file with the normalized data
result <- read.csv("VTA_effectAcrossGenotype_3jul2019.csv", header = TRUE, stringsAsFactors = FALSE)
result$remark <- as.factor(result$remark)
#subset the genes of interest
genesOfInterest <- result[(result$remark %in% "significant") | (result$remark %in% "significant & more than 1-fold"),]
#define the background
#remove duplicated rows with names: ‘ENSMUSG00000079774’, ‘ENSMUSG00000096271’, ‘ENSMUSG00000117098’, ‘ENSMUSG00000117286’
#result[result$ensembl_gene_id %in% c("ENSMUSG00000079774", "ENSMUSG00000096271", "ENSMUSG00000115886", "ENSMUSG00000117098", "ENSMUSG00000117098","ENSMUSG00000117286"), ]
#first indentify duplicated rows: 16718, 16719, 18164, 19851, 19872
result <- result[-c(16657, 16658, 17987, 19397, 19599, 19618), ]
rownames(result) <- result$ensembl_gene_id
#results_witoutGOI <- result[!result$ensembl_gene_id %in% genesOfInterest$ensembl_gene_id,]
overallBaseMean <- as.matrix(result[,"baseMean", drop = F])
backG <- genefinder(overallBaseMean, genesOfInterest$ensembl_gene_id, 10, method = "euc")
backG <- rownames(overallBaseMean)[as.vector(sapply(backG, function(x)x$indices))]
backG <- setdiff(backG, genesOfInterest$ensembl_gene_id)
multidensity(list(
all =log2(result[,"baseMean"]),
fore = log2(result[genesOfInterest$ensembl_gene_id,"baseMean"]),
back = log2(result[backG, "baseMean"])),
xlab="log2 mean counts", main = "Matching for enrichment analysis")
legend("topright",
legend = c("All gene", "Gene of interest","background"),
col = c("black","green","red"),
lwd=1)
genesOfInterest_list <- genesOfInterest$ensembl_gene_id
genesOfInterest_list <- unique(genesOfInterest_list)
geneUniverse_list <- unique(c(backG, genesOfInterest_list))
geneList <- factor(as.integer(geneUniverse_list %in% genesOfInterest_list))
names(geneList) <- geneUniverse_list
GOdata <- new ("topGOdata", ontology ="MF",
allGenes = geneList, annot=annFUN.org, mapping="org.Mm.eg.db", ID = "ensembl")
resultFisher <- runTest(GOdata, algorithm = "classic", statistic = "Fisher")
Result_Fisher <- GenTable(GOdata, classicFisher = resultFisher, topNodes = 200)
head(Result_Fisher)
par(cex = 0.6)
showSigOfNodes(GOdata, score(resultFisher), firstSigNodes = 5, useInfo = "all")
resultFisher.elim <- runTest(GOdata, algorithm = "elim", statistic = "Fisher")
Result_Fisher.elim <- GenTable(GOdata, elimFisher = resultFisher.elim, topNodes = 200)
head(Result_Fisher.elim)
par(cex = 0.6)
showSigOfNodes(GOdata, score(resultFisher.elim), firstSigNodes = 5, useInfo = "all")
resultKS <- runTest(GOdata, algorithm = "classic", statistic = "ks")
Result_KS <- GenTable(GOdata, classicKS = resultKS, topNodes = 200)
head(Result_KS)
par(cex = 0.6)
showSigOfNodes(GOdata, score(resultKS), firstSigNodes = 5, useInfo = "all")
resultKS.elim <- runTest(GOdata, algorithm = "elim", statistic = "ks")
Result_elimKS <- GenTable(GOdata, elimKS = resultKS.elim, topNodes = 200)
head(Result_elimKS)
par(cex = 0.6)
showSigOfNodes(GOdata, score(resultKS.elim), firstSigNodes = 5, useInfo = "all")
#read in the rlog transformation table
rld <- read.csv("~/Desktop/Jurgen RNAseq project/VTA results/VTA_rlog_transformation_3jul2019.csv", header = TRUE, stringsAsFactors = FALSE)
#read in the rlog transformation table
rld <- read.csv("~/Desktop/Jurgen RNAseq project/VTA results/VTA_rlog_transformation_3jul2019.csv", header = TRUE, stringsAsFactors = FALSE)
colnames(rld)[1] <-"ensembl_gene_id"
genemap <- read.csv("~/Desktop/Jurgen RNAseq project/genemap.csv", header = TRUE, stringsAsFactors = FALSE)
gene2GO <- select(genemap, ensembl_gene_id, go_id)
gene2GO <- unique(gene2GO)
gene2Name <-select(genemap, mgi_symbol, ensembl_gene_id)
gene2Name <- unique(gene2Name)
rld <- left_join(rld, gene2Name, by = "ensembl_gene_id")
rld$Name <- paste0(rld$ensembl_gene_id, ", ", rld$mgi_symbol)
for (i in 1:5){
# extract the list of genes by the topGO
Gene_topGO <- gene2GO$ensembl_gene_id[gene2GO$go_id %in% Result_Fisher$GO.ID[i]]
if (length(Gene_topGO ) >= 2 ) {
topGOExpression <- rld[rld$ensembl_gene_id %in% Gene_topGO,]
topGOExpression <- select(topGOExpression, - ensembl_gene_id, - mgi_symbol)
rownames(topGOExpression) <- topGOExpression$Name
topGOExpression <- select(topGOExpression, - Name)
topGOExpression <- as.matrix(topGOExpression)
heatmap(topGOExpression, scale="row", Colv= NA, main= paste0(Result_Fisher$GO.ID[i],", ", Result_Fisher$Term[i]), col = colorRampPalette(rev(brewer.pal(9,"RdBu")))(255))
} else {
print(" ")}
}
for (i in 1:5){
# extract the list of genes by the topGO
Gene_topGO <- gene2GO$ensembl_gene_id[gene2GO$go_id %in% Result_Fisher.elim$GO.ID[i]]
if (length(Gene_topGO ) >= 2 ) {
topGOExpression <- rld[rld$ensembl_gene_id %in% Gene_topGO,]
topGOExpression <- select(topGOExpression, - ensembl_gene_id, - mgi_symbol)
rownames(topGOExpression) <- topGOExpression$Name
topGOExpression <- select(topGOExpression, - Name)
topGOExpression <- as.matrix(topGOExpression)
heatmap(topGOExpression, scale="row", Colv= NA, main= paste0(Result_Fisher.elim$GO.ID[i],", ", Result_Fisher.elim$Term[i]), col = colorRampPalette(rev(brewer.pal(9,"RdBu")))(255))
} else {
print(" ")}
}
for (i in 1:5){
# extract the list of genes by the topGO
Gene_topGO <- gene2GO$ensembl_gene_id[gene2GO$go_id %in% Result_KS$GO.ID[i]]
if (length(Gene_topGO ) >= 2 ) {
topGOExpression <- rld[rld$ensembl_gene_id %in% Gene_topGO,]
topGOExpression <- select(topGOExpression, - ensembl_gene_id, - mgi_symbol)
rownames(topGOExpression) <- topGOExpression$Name
topGOExpression <- select(topGOExpression, - Name)
topGOExpression <- as.matrix(topGOExpression)
heatmap(topGOExpression, scale="row", Colv= NA, main= paste0(Result_KS$GO.ID[i],", ", Result_KS$Term[i]), col = colorRampPalette(rev(brewer.pal(9,"RdBu")))(255))
} else {
print(" ")}
}
for (i in 1:5){
# extract the list of genes by the topGO
Gene_topGO <- gene2GO$ensembl_gene_id[gene2GO$go_id %in% Result_elimKS$GO.ID[i]]
if (length(Gene_topGO ) >= 2 ) {
topGOExpression <- rld[rld$ensembl_gene_id %in% Gene_topGO,]
topGOExpression <- select(topGOExpression, - ensembl_gene_id, - mgi_symbol)
rownames(topGOExpression) <- topGOExpression$Name
topGOExpression <- select(topGOExpression, - Name)
topGOExpression <- as.matrix(topGOExpression)
heatmap(topGOExpression, scale="row", Colv= NA, main= paste0(Result_elimKS$GO.ID[i],", ", Result_elimKS$Term[i]), col = colorRampPalette(rev(brewer.pal(9,"RdBu")))(255))
} else {
print(" ")}
}
#for (i in 1:5){
# extract the list of genes by the topGO
Gene_topGO <- gene2GO$ensembl_gene_id[gene2GO$go_id %in% Result_Fisher$GO.ID[1]]
if (length(Gene_topGO ) >= 2 ) {
topGOExpression <- rld[rld$ensembl_gene_id %in% Gene_topGO,]
topGOExpression <- select(topGOExpression, - ensembl_gene_id, - mgi_symbol)
rownames(topGOExpression) <- topGOExpression$Name
topGOExpression <- select(topGOExpression, - Name)
topGOExpression <- as.matrix(topGOExpression)
heatmap(topGOExpression, scale="row", Colv= NA, main= paste0(Result_Fisher$GO.ID[1],", ", Result_Fisher$Term[1]), col = colorRampPalette(rev(brewer.pal(9,"RdBu")))(255))
} else {
print(" ")}
}
#for (i in 1:5){
# extract the list of genes by the topGO
Gene_topGO <- gene2GO$ensembl_gene_id[gene2GO$go_id %in% Result_Fisher$GO.ID[1]]
if (length(Gene_topGO ) >= 2 ) {
topGOExpression <- rld[rld$ensembl_gene_id %in% Gene_topGO,]
topGOExpression <- select(topGOExpression, - ensembl_gene_id, - mgi_symbol)
rownames(topGOExpression) <- topGOExpression$Name
topGOExpression <- select(topGOExpression, - Name)
topGOExpression <- as.matrix(topGOExpression)
heatmap(topGOExpression, scale="row", Colv= NA, main= paste0(Result_Fisher$GO.ID[1],", ", Result_Fisher$Term[1]), col = colorRampPalette(rev(brewer.pal(9,"RdBu")))(255))
} else {
print(" ")}
#}
#for (i in 1:5){
# extract the list of genes by the topGO
Gene_topGO <- gene2GO$ensembl_gene_id[gene2GO$go_id %in% Result_Fisher$GO.ID[2]]
if (length(Gene_topGO ) >= 2 ) {
topGOExpression <- rld[rld$ensembl_gene_id %in% Gene_topGO,]
topGOExpression <- select(topGOExpression, - ensembl_gene_id, - mgi_symbol)
rownames(topGOExpression) <- topGOExpression$Name
topGOExpression <- select(topGOExpression, - Name)
topGOExpression <- as.matrix(topGOExpression)
heatmap(topGOExpression, scale="row", Colv= NA, main= paste0(Result_Fisher$GO.ID[2],", ", Result_Fisher$Term[2]), col = colorRampPalette(rev(brewer.pal(9,"RdBu")))(255))
} else {
print(" ")}
#}
#for (i in 1:5){
# extract the list of genes by the topGO
Gene_topGO <- gene2GO$ensembl_gene_id[gene2GO$go_id %in% Result_Fisher$GO.ID[3]]
if (length(Gene_topGO ) >= 2 ) {
topGOExpression <- rld[rld$ensembl_gene_id %in% Gene_topGO,]
topGOExpression <- select(topGOExpression, - ensembl_gene_id, - mgi_symbol)
rownames(topGOExpression) <- topGOExpression$Name
topGOExpression <- select(topGOExpression, - Name)
topGOExpression <- as.matrix(topGOExpression)
heatmap(topGOExpression, scale="row", Colv= NA, main= paste0(Result_Fisher$GO.ID[3],", ", Result_Fisher$Term[3]), col = colorRampPalette(rev(brewer.pal(9,"RdBu")))(255))
} else {
print(" ")}
for (i in 1:5){
# extract the list of genes by the topGO
Gene_topGO <- gene2GO$ensembl_gene_id[gene2GO$go_id %in% Result_Fisher$GO.ID[i]]
topGOExpression <- rld[rld$ensembl_gene_id %in% Gene_topGO,]
if (length(topGOExpression$ensembl_gene_id) >= 2 ) {
topGOExpression <- select(topGOExpression, - ensembl_gene_id, - mgi_symbol)
rownames(topGOExpression) <- topGOExpression$Name
topGOExpression <- select(topGOExpression, - Name)
topGOExpression <- as.matrix(topGOExpression)
heatmap(topGOExpression, scale="row", Colv= NA, main= paste0(Result_KS$GO.ID[i],", ", Result_KS$Term[i]), col = colorRampPalette(rev(brewer.pal(9,"RdBu")))(255))
} else {
print(" ")}
}
library(topGO)
library(dplyr)
library(tidyr)
library(RColorBrewer)
library(genefilter)
library(cancerTiming)
# set working directory
setwd("~/Desktop/Jurgen RNAseq project/SCN results")
#read in the file with the normalized data
result <- read.csv("SCN_Per1_lightvsControl_3jul2019.csv", header = TRUE, stringsAsFactors = FALSE)
result$remark <- as.factor(result$remark)
#subset the genes of interest
genesOfInterest <- result[(result$remark %in% "significant") | (result$remark %in% "significant & more than 1-fold"),]
#define the background
#remove duplicated rows with names: ‘ENSMUSG00000079774’, ‘ENSMUSG00000096271’, ‘ENSMUSG00000117098’, ‘ENSMUSG00000117286’
#result[result$ensembl_gene_id %in% c("ENSMUSG00000079774", "ENSMUSG00000096271", "ENSMUSG00000117098", "ENSMUSG00000117286"), ]
#first indentify duplicated rows: 16718, 16719, 18164, 19851, 19872
result <- result[-c(16718, 16719, 18164, 19851, 19872), ]
rownames(result) <- result$ensembl_gene_id
#results_witoutGOI <- result[!result$ensembl_gene_id %in% genesOfInterest$ensembl_gene_id,]
overallBaseMean <- as.matrix(result[,"baseMean", drop = F])
backG <- genefinder(overallBaseMean, genesOfInterest$ensembl_gene_id, 10, method = "euc")
backG <- rownames(overallBaseMean)[as.vector(sapply(backG, function(x)x$indices))]
backG <- setdiff(backG, genesOfInterest$ensembl_gene_id)
multidensity(list(
all =log2(result[,"baseMean"]),
fore = log2(result[genesOfInterest$ensembl_gene_id,"baseMean"]),
back = log2(result[backG, "baseMean"])),
xlab="log2 mean counts", main = "Matching for enrichment analysis")
legend("topright",
legend = c("All gene", "Gene of interest","background"),
col = c("black","green","red"),
lwd=1)
genesOfInterest_list <- genesOfInterest$ensembl_gene_id
genesOfInterest_list <- unique(genesOfInterest_list)
geneUniverse_list <- unique(c(backG, genesOfInterest_list))
geneList <- factor(as.integer(geneUniverse_list %in% genesOfInterest_list))
names(geneList) <- geneUniverse_list
GOdata <- new ("topGOdata", ontology ="CC",
allGenes = geneList, annot=annFUN.org, mapping="org.Mm.eg.db", ID = "ensembl")
resultFisher <- runTest(GOdata, algorithm = "classic", statistic = "Fisher")
Result_Fisher <- GenTable(GOdata, classicFisher = resultFisher, topNodes = 200)
head(Result_Fisher)
par(cex = 0.6)
showSigOfNodes(GOdata, score(resultFisher), firstSigNodes = 5, useInfo = "all")
resultFisher.elim <- runTest(GOdata, algorithm = "elim", statistic = "Fisher")
Result_Fisher.elim <- GenTable(GOdata, elimFisher = resultFisher.elim, topNodes = 200)
head(Result_Fisher.elim)
par(cex = 0.6)
showSigOfNodes(GOdata, score(resultFisher.elim), firstSigNodes = 5, useInfo = "all")
resultKS <- runTest(GOdata, algorithm = "classic", statistic = "ks")
Result_KS <- GenTable(GOdata, classicKS = resultKS, topNodes = 200)
head(Result_KS)
par(cex = 0.6)
showSigOfNodes(GOdata, score(resultKS), firstSigNodes = 5, useInfo = "all")
resultKS.elim <- runTest(GOdata, algorithm = "elim", statistic = "ks")
Result_elimKS <- GenTable(GOdata, elimKS = resultKS.elim, topNodes = 200)
head(Result_elimKS)
par(cex = 0.6)
showSigOfNodes(GOdata, score(resultKS.elim), firstSigNodes = 5, useInfo = "all")
#read in the rlog transformation table
rld <- read.csv("~/Desktop/Jurgen RNAseq project/SCN results/SCN_rlog_transformation_3jul2019.csv", header = TRUE, stringsAsFactors = FALSE)
colnames(rld)[1] <-"ensembl_gene_id"
genemap <- read.csv("~/Desktop/Jurgen RNAseq project/genemap.csv", header = TRUE, stringsAsFactors = FALSE)
gene2GO <- select(genemap, ensembl_gene_id, go_id)
gene2GO <- unique(gene2GO)
gene2Name <-select(genemap, mgi_symbol, ensembl_gene_id)
gene2Name <- unique(gene2Name)
rld <- left_join(rld, gene2Name, by = "ensembl_gene_id")
rld$Name <- paste0(rld$ensembl_gene_id, ", ", rld$mgi_symbol)
for (i in 1:5){
# extract the list of genes by the topGO
Gene_topGO <- gene2GO$ensembl_gene_id[gene2GO$go_id %in% Result_Fisher$GO.ID[i]]
if (length(Gene_topGO ) >= 2 ) {
topGOExpression <- rld[rld$ensembl_gene_id %in% Gene_topGO,]
topGOExpression <- select(topGOExpression, - ensembl_gene_id, - mgi_symbol)
rownames(topGOExpression) <- topGOExpression$Name
topGOExpression <- select(topGOExpression, - Name)
topGOExpression <- as.matrix(topGOExpression)
heatmap(topGOExpression, scale="row", Colv= NA, main= paste0(Result_Fisher$GO.ID[i],", ", Result_Fisher$Term[i]), col = colorRampPalette(rev(brewer.pal(9,"RdBu")))(255))
} else {
print(" ")}
}
for (i in 1:5){
# extract the list of genes by the topGO
Gene_topGO <- gene2GO$ensembl_gene_id[gene2GO$go_id %in% Result_Fisher.elim$GO.ID[i]]
if (length(Gene_topGO ) >= 2 ) {
topGOExpression <- rld[rld$ensembl_gene_id %in% Gene_topGO,]
topGOExpression <- select(topGOExpression, - ensembl_gene_id, - mgi_symbol)
rownames(topGOExpression) <- topGOExpression$Name
topGOExpression <- select(topGOExpression, - Name)
topGOExpression <- as.matrix(topGOExpression)
heatmap(topGOExpression, scale="row", Colv= NA, main= paste0(Result_Fisher.elim$GO.ID[i],", ", Result_Fisher.elim$Term[i]), col = colorRampPalette(rev(brewer.pal(9,"RdBu")))(255))
} else {
print(" ")}
}
for (i in 1:5){
# extract the list of genes by the topGO
Gene_topGO <- gene2GO$ensembl_gene_id[gene2GO$go_id %in% Result_KS$GO.ID[i]]
if (length(Gene_topGO ) >= 2 ) {
topGOExpression <- rld[rld$ensembl_gene_id %in% Gene_topGO,]
topGOExpression <- select(topGOExpression, - ensembl_gene_id, - mgi_symbol)
rownames(topGOExpression) <- topGOExpression$Name
topGOExpression <- select(topGOExpression, - Name)
topGOExpression <- as.matrix(topGOExpression)
heatmap(topGOExpression, scale="row", Colv= NA, main= paste0(Result_KS$GO.ID[i],", ", Result_KS$Term[i]), col = colorRampPalette(rev(brewer.pal(9,"RdBu")))(255))
} else {
print(" ")}
}
for (i in 1:5){
# extract the list of genes by the topGO
Gene_topGO <- gene2GO$ensembl_gene_id[gene2GO$go_id %in% Result_elimKS$GO.ID[i]]
if (length(Gene_topGO ) >= 2 ) {
topGOExpression <- rld[rld$ensembl_gene_id %in% Gene_topGO,]
topGOExpression <- select(topGOExpression, - ensembl_gene_id, - mgi_symbol)
rownames(topGOExpression) <- topGOExpression$Name
topGOExpression <- select(topGOExpression, - Name)
topGOExpression <- as.matrix(topGOExpression)
heatmap(topGOExpression, scale="row", Colv= NA, main= paste0(Result_elimKS$GO.ID[i],", ", Result_elimKS$Term[i]), col = colorRampPalette(rev(brewer.pal(9,"RdBu")))(255))
} else {
print(" ")}
}
for (i in 1:5){
# extract the list of genes by the topGO
Gene_topGO <- gene2GO$ensembl_gene_id[gene2GO$go_id %in% Result_Fisher$GO.ID[i]]
topGOExpression <- rld[rld$ensembl_gene_id %in% Gene_topGO,]
if (length(topGOExpression$ensembl_gene_id) >= 2 ) {
topGOExpression <- select(topGOExpression, - ensembl_gene_id, - mgi_symbol)
rownames(topGOExpression) <- topGOExpression$Name
topGOExpression <- select(topGOExpression, - Name)
topGOExpression <- as.matrix(topGOExpression)
heatmap(topGOExpression, scale="row", Colv= NA, main= paste0(Result_Fisher$GO.ID[i],", ", Result_Fisher$Term[i]), col = colorRampPalette(rev(brewer.pal(9,"RdBu")))(255))
} else {
print(" ")}
}
source('~/Desktop/brainRNASeq/R_analysis/Rscript/script_DESeq2ResultsToCSV_LHb.R')
