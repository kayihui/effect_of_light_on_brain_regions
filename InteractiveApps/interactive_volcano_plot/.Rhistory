reverse = TRUE,
lty = rep("solid",3),
fill = NULL,
euler.d = TRUE,
scaled = TRUE,
cat.pos = c(0, 180, 0),
cat.dist = c(0.05, 0.05, 0.05),
cat.default.pos= "outer",
direct.area = FALSE)
draw.triple.venn(area1 = 2,
area2 = 109,
area3 = 217,
n12 = 0,
n23 = 3,
n13 = 63,
n123 = 0,
category = c("WT", "Per1","Difference between the Per1 and WT"),
reverse = TRUE,
lty = rep("solid",3),
fill = NULL,
euler.d = TRUE,
scaled = TRUE,
cat.pos = c(0, 180, 0),
cat.dist = c(0.05, 0.05, 0.05),
cat.default.pos= "outer",
direct.area = FALSE)
draw.triple.venn(area1 = 79,
area2 = 3,
area3 = 166,
n12 = 0,
n23 = 3,
n13 = 63,
n123 = 0,
category = c("WT", "Per1","Difference between the Per1 and WT"),
reverse = TRUE,
lty = rep("solid",3),
fill = NULL,
euler.d = TRUE,
scaled = TRUE,
cat.pos = c(0, 180, 0),
cat.dist = c(0.05, 0.05, 0.05),
cat.default.pos= "outer",
direct.area = FALSE)
draw.triple.venn(area1 = 79,
area2 = 3,
area3 = 166,
n12 = 0,
n23 = 3,
n13 = 63,
n123 = 0,
category = c("WT", "Per1","Difference between the Per1 and WT"),
reverse = TRUE,
lty = rep("solid",3),
fill = NULL,
euler.d = TRUE,
scaled = TRUE,
cat.pos = c(0, 180, 0),
cat.dist = c(0.05, 0.05, 0.05),
cat.default.pos= "outer",
direct.area = FALSE)
geneUniverse <- as.vector(result5$ensembl_gene_id)
#subset differentially expressed gene
genesOfInterest <- as.vector(result5$ensembl_gene_id[result5$remark %in% "significant & more than 1-fold"])
geneList <- factor(as.integer(geneUniverse %in% genesOfInterest))
names(geneList) <- geneUniverse
myGOdata <- new ("topGOdata", ontology = GO_type,
allGenes = geneList, annot=annFUN.org, mapping="org.Mm.eg.db", ID = "ensembl")
library(topGO)
geneUniverse <- as.vector(result5$ensembl_gene_id)
#subset differentially expressed gene
genesOfInterest <- as.vector(result5$ensembl_gene_id[result5$remark %in% "significant & more than 1-fold"])
geneList <- factor(as.integer(geneUniverse %in% genesOfInterest))
names(geneList) <- geneUniverse
myGOdata <- new ("topGOdata", ontology = GO_type,
allGenes = geneList, annot=annFUN.org, mapping="org.Mm.eg.db", ID = "ensembl")
geneUniverse <- as.vector(result5$ensembl_gene_id)
#subset differentially expressed gene
genesOfInterest <- as.vector(result5$ensembl_gene_id[result5$remark %in% "significant & more than 1-fold"])
geneList <- factor(as.integer(geneUniverse %in% genesOfInterest))
names(geneList) <- geneUniverse
myGOdata <- new ("topGOdata", ontology = "BP",
allGenes = geneList, annot=annFUN.org, mapping="org.Mm.eg.db", ID = "ensembl")
View(myGOdata)
summary(myGOdata@description)
summary(myGOdata@graph)
View(GO_result1)
venn.plot <- venn.diagram(
x,
filename = NULL
);
grid.draw(venn.plot)
venn.plot <- venn.diagram(
x,
filename = NULL
);
grid.draw(venn.plot)
View(venn_cal)
lengthvenn_cal[1]
length(venn_cal[1])
length(venn_cal[2])
length(venn_cal[a1])
venn_cal
length(venn_cal$a1)
venn.plot <- venn.diagram(x,reverse = TRUE,
lty = rep("solid",3),
fill = NULL,
euler.d = TRUE,
scaled = TRUE,
cat.pos = c(0, 180, 0),
cat.dist = c(0.05, 0.05, 0.05),
cat.default.pos= "outer",
direct.area = FALSE,
filename = NULL
)
grid.draw(venn.plot)
x <- list( "WT"= WT_light_response,
"Per1" = Per1_light_response,
"difference between the Per1 and WT" = difference_between_WT_Per1)
venn.plot <- venn.diagram(x,reverse = TRUE,
lty = rep("solid",3),
fill = NULL,
euler.d = TRUE,
scaled = TRUE,
cat.pos = c(0, 180, 0),
cat.dist = c(0.05, 0.05, 0.05),
cat.default.pos= "outer",
direct.area = FALSE,
filename = NULL
)
grid.draw(venn.plot)
GO_BP_gene_list <-res9[res9$go_id %in% GO_result1$GO.ID,]
# load all the required libraries
library(DESeq2)
library(tximport)
library(readr)
library(ggplot2)
library(vsn)
library(rhdf5)
library(fdrtool)
library(genefilter)
library(gplots)
library(topGO)
library(RColorBrewer)
library(tidyr)
library(dplyr)
source('~/Desktop/Jurgen RNAseq project/add_gene_info.r')
source('~/Desktop/Jurgen RNAseq project/TopGOanaylsis.R')
# set the working directory
setwd("~/Desktop/Jurgen RNAseq project")
# define the directory with the kallisto output
dir <- "~/Desktop/Jurgen RNAseq project"
# read the csv file containing the metadata
sampleTable <- read_csv("meta_data_LHb.csv")
# get the paths of the files of all the kallisto outputs and test if the files exists
files <- file.path(dir, "without_bootstrap", sampleTable$file_name, "abundance.h5")
names(files) <- sampleTable$sample
file.exists(files)
# the gene map will be the same with all the data frame for annotations
genemap <- read.csv("genemap.csv", header = TRUE, stringsAsFactors = FALSE)
# read in the files with the transcipt ID to gene ID
tx2gene <- read_csv("tx2gene.csv")
# use tximport to combine the abundance files, and conventing the transcript ID to gene ID
txi <- tximport(files, type = "kallisto", tx2gene = tx2gene)
# creating the DESeq object and further analysis
ExpDesign <- ~ genotype + condition + genotype:condition
dds <- DESeqDataSetFromTximport(txi, sampleTable, design = ExpDesign)
# relevel to make sure that the reference is 'WT'
dds$genotype <- relevel(dds$genotype, "WT")
# Pre-filtering out the genes that have too low expression
dds <- dds[ rowSums(counts(dds)) > 25, ]
#creating the dds object
dds <- DESeq(dds)
resultsNames(dds)
plotDispEsts( dds, ylim = c(1e-6, 1e1))
# Result table 1
res1 <- results(dds, contrast = c("condition", "light_induced", "control"))
plotMA(res1, ylim = c(-2, 2))
metadata(res1)$filterThreshold
plot(metadata(res1)$filterNumRej, xlab="quantile of baseMean", ylab="number of rejections")
hist(res1$pvalue, breaks = 20, col ='grey', main = "The effect of light on WT", xlab = "pvalue", ylab = "Frequency")
# adding annonations to the result table
result1 <- addGeneInfo(res1, genemap)
summary(result1$remark)
# Volcano plot
g <- ggplot(result1, aes(x=log2FoldChange, y= -log10(pvalue)))
g + geom_jitter(aes(color = remark)) + ggtitle("WT(control Vs light induced) Volcano plot")
res2 <- results(dds, list(c("condition_light_induced_vs_control", "genotypePer1.conditionlight_induced")))
# Result table 2
plotMA(res2, ylim = c(-2, 2))
metadata(res2)$filterThreshold
plot(metadata(res2)$filterNumRej, xlab="quantile of baseMean", ylab="number of rejections")
hist(res2$pvalue, breaks = 20, col ='grey', main = "Per1 (control Vs light induced)", xlab = "pvalue", ylab = "Frequency")
# adding annonations to the result table
result2 <- addGeneInfo(res2, genemap)
summary(result2$remark)
# Volcano plot
g2 <- ggplot(result2, aes(x=log2FoldChange, y= -log10(pvalue)))
g2 + geom_jitter(aes(color = remark)) + ggtitle("Per1 (control Vs light induced) Volcano plot")
# Result table 3
res3 <- results(dds, contrast = c("genotype", "Per1", "WT"))
plotMA(res3, ylim = c(-2, 2))
metadata(res3)$filterThreshold
plot(metadata(res3)$filterNumRej, xlab="quantile of baseMean", ylab="number of rejections")
hist(res3$pvalue, breaks = 20, col ='grey', main = "WT vs Per1 (control)", xlab = "pvalue", ylab = "Frequency")
# adding annonations to the result table
result3 <- addGeneInfo(res3, genemap)
summary(result3$remark)
# Volcano plot
g3 <- ggplot(result3, aes(x=log2FoldChange, y= -log10(pvalue)))
g3 + geom_jitter(aes(color = remark)) + ggtitle("WT vs Per1 (control) Volcano plot")
res4 <- results(dds, list(c("genotype_Per1_vs_WT", "genotypePer1.conditionlight_induced")))
plotMA(res4, ylim = c(-2, 2))
metadata(res4)$filterThreshold
plot(metadata(res4)$filterNumRej, xlab="quantile of baseMean", ylab="number of rejections")
hist(res4$pvalue, breaks = 20, col ='grey', main = "WT vs Per1 (light)", xlab = "pvalue", ylab = "Frequency")
# adding annonations to the result table
result4 <- addGeneInfo(res4, genemap)
summary(result4$remark)
# Volcano plot
g4 <- ggplot(result4, aes(x=log2FoldChange, y= -log10(pvalue)))
g4 + geom_jitter(aes(color = remark)) + ggtitle("WT vs Per1 (light) Volcano plot")
res5 <- results(dds, name = "genotypePer1.conditionlight_induced")
plotMA(res5, ylim = c(-2, 2))
metadata(res5)$filterThreshold
plot(metadata(res5)$filterNumRej, xlab="quantile of baseMean", ylab="number of rejections")
hist(res5$pvalue, breaks = 20, col ='grey', main = "The different response in genotypes", xlab = "pvalue", ylab = "Frequency")
# adding annonations to the result table
result5 <- addGeneInfo(res5, genemap)
summary(result5$remark)
# Volcano plot
g5 <- ggplot(result5, aes(x=log2FoldChange, y= -log10(pvalue)))
g5 + geom_jitter(aes(color = remark)) + ggtitle("Difference of light response in Per1 vs WT Volcano plot")
rld <- rlog(dds)
pcaData <- plotPCA(rld, intgroup=c("genotype", "condition"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color=genotype,shape=condition)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()
#sample distance
sampledist <- dist(t(assay(rld)))
sampleDistMatrix <- as.matrix(sampledist)
rownames(sampleDistMatrix) <- paste(rld$genotype, rld$condition, sep="-")
colnames(sampleDistMatrix) <- NULL
colours = colorRampPalette(rev(brewer.pal(9, "Blues")))(255)
heatmap.2(sampleDistMatrix, trace="none", col = colours)
#select the topGene with
topVarGenes <- result5[result5$remark == "significant & more than 1-fold",]
topVarGenes$padj <- order(topVarGenes$padj, decreasing = TRUE)
res6 <- assay(rld)
heatmap.2(res6[topVarGenes$ensembl_gene_id,], scale="row",
trace="none", dendrogram = "column", col = colorRampPalette(rev(brewer.pal(9,"RdBu")))(255))
res7 <- assay(dds)
res7 <- as.data.frame(assay(dds))
res7$ensembl_gene_id <- sapply (strsplit(rownames(res7), split="\\+"), "[", 1)
res7 <- gather(res7, key = "sample", n, 1:24)
res7 <- left_join(res7, sampleTable, by = "sample" )
genesOfInterest <- topVarGenes$ensembl_gene_id
res8 <- res7[res7$ensembl_gene_id %in% genesOfInterest, ]
res8 <- select(res8, -file_name)
res8 <- mutate(res8, "experiment" = paste(genotype, condition, sep = "-"))
res8$experiment <- as.factor(res8$experiment)
res8$experiment <- factor(res8$experiment,levels = c("WT-control", "WT-light_induced", "Per1-control", "Per1-light_induced"))
TopExpress <- topVarGenes
TopExpress$baseMean <- order(topVarGenes$baseMean, decreasing = TRUE)
for (i in 1:length(TopExpress$ensembl_gene_id)){
g <- ggplot(res8[res8$ensembl_gene_id %in% TopExpress$ensembl_gene_id[i], ], aes(x=experiment, y = n)) + geom_dotplot(binaxis = "y") + ggtitle(TopExpress$mgi_symbol[i])
print(g)
}
res7 <- assay(dds)
res7 <- as.data.frame(assay(dds))
res7$ensembl_gene_id <- sapply (strsplit(rownames(res7), split="\\+"), "[", 1)
res7 <- gather(res7, key = "sample", n, 1:24)
res7 <- left_join(res7, sampleTable, by = "sample" )
genesOfInterest <- topVarGenes$ensembl_gene_id
res8 <- res7[res7$ensembl_gene_id %in% genesOfInterest, ]
res7$ensembl_gene_id %in% genesOfInterest
res7 <- assay(dds)
res7$ensembl_gene_id %in% genesOfInterest
res7[genesOfInterest,]
res7 <- assay(dds)
res7 <- res7[genesOfInterest,]
res7 <- as.data.frame(assay(dds))
res7$ensembl_gene_id <- sapply (strsplit(rownames(res7), split="\\+"), "[", 1)
res7 <- gather(res7, key = "sample", n, 1:24)
res7 <- left_join(res7, sampleTable, by = "sample" )
res8 <- select(res8, -file_name)
res8 <- mutate(res8, "experiment" = paste(genotype, condition, sep = "-"))
res8$experiment <- as.factor(res8$experiment)
res8$experiment <- factor(res8$experiment,levels = c("WT-control", "WT-light_induced", "Per1-control", "Per1-light_induced"))
TopExpress <- topVarGenes
TopExpress$baseMean <- order(topVarGenes$baseMean, decreasing = TRUE)
res7 <- assay(dds)
res7 <- res7[genesOfInterest,]
res7 <- as.data.frame(res7)
res7$ensembl_gene_id <- sapply (strsplit(rownames(res7), split="\\+"), "[", 1)
res7 <- gather(res7, key = "sample", n, 1:24)
res7 <- left_join(res7, sampleTable, by = "sample" )
res8 <- select(res8, -file_name)
res7 <- assay(dds)
res7 <- res7[genesOfInterest,]
res7 <- as.data.frame(res7)
res7$ensembl_gene_id <- sapply (strsplit(rownames(res7), split="\\+"), "[", 1)
res7 <- gather(res7, key = "sample", n, 1:24)
res8 <- left_join(res7, sampleTable, by = "sample" )
res8 <- select(res8, -file_name)
res8 <- mutate(res8, "experiment" = paste(genotype, condition, sep = "-"))
res8$experiment <- as.factor(res8$experiment)
res8$experiment <- factor(res8$experiment,levels = c("WT-control", "WT-light_induced", "Per1-control", "Per1-light_induced"))
TopExpress <- topVarGenes
TopExpress$baseMean <- order(topVarGenes$baseMean, decreasing = TRUE)
for (i in 1:length(TopExpress$ensembl_gene_id)){
g <- ggplot(res8[res8$ensembl_gene_id %in% TopExpress$ensembl_gene_id[i], ], aes(x=experiment, y = n)) + geom_dotplot(binaxis = "y") + ggtitle(TopExpress$mgi_symbol[i])
print(g)
}
g <- ggplot(res8[res8$ensembl_gene_id %in% TopExpress$ensembl_gene_id[1], ], aes(x=experiment, y = n)) + geom_dotplot(binaxis = "y") + ggtitle(TopExpress$mgi_symbol[1])
print(g)
res7 <- assay(dds)
res7 <- res7[genesOfInterest,]
res7 <- as.data.frame(res7)
res7$ensembl_gene_id <- sapply (strsplit(rownames(res7), split="\\+"), "[", 1)
res7 <- gather(res7, key = "sample", n, 1:24)
head(res7)
# load all the required libraries
library(DESeq2)
library(tximport)
library(readr)
library(ggplot2)
library(vsn)
library(rhdf5)
library(fdrtool)
library(genefilter)
library(gplots)
library(topGO)
library(RColorBrewer)
library(tidyr)
library(dplyr)
source('~/Desktop/Jurgen RNAseq project/add_gene_info.r')
source('~/Desktop/Jurgen RNAseq project/TopGOanaylsis.R')
# set the working directory
setwd("~/Desktop/Jurgen RNAseq project")
# define the directory with the kallisto output
dir <- "~/Desktop/Jurgen RNAseq project"
# read the csv file containing the metadata
sampleTable <- read_csv("meta_data_LHb.csv")
# get the paths of the files of all the kallisto outputs and test if the files exists
files <- file.path(dir, "without_bootstrap", sampleTable$file_name, "abundance.h5")
names(files) <- sampleTable$sample
file.exists(files)
# the gene map will be the same with all the data frame for annotations
genemap <- read.csv("genemap.csv", header = TRUE, stringsAsFactors = FALSE)
# read in the files with the transcipt ID to gene ID
tx2gene <- read_csv("tx2gene.csv")
# use tximport to combine the abundance files, and conventing the transcript ID to gene ID
txi <- tximport(files, type = "kallisto", tx2gene = tx2gene)
# creating the DESeq object and further analysis
ExpDesign <- ~ genotype + condition + genotype:condition
dds <- DESeqDataSetFromTximport(txi, sampleTable, design = ExpDesign)
# relevel to make sure that the reference is 'WT'
dds$genotype <- relevel(dds$genotype, "WT")
# Pre-filtering out the genes that have too low expression
dds <- dds[ rowSums(counts(dds)) > 25, ]
#creating the dds object
dds <- DESeq(dds)
resultsNames(dds)
plotDispEsts( dds, ylim = c(1e-6, 1e1))
# load all the required libraries
library(DESeq2)
library(tximport)
library(readr)
library(ggplot2)
library(vsn)
library(rhdf5)
library(fdrtool)
library(genefilter)
library(gplots)
library(topGO)
library(RColorBrewer)
library(tidyr)
library(dplyr)
source('~/Desktop/Jurgen RNAseq project/add_gene_info.r')
source('~/Desktop/Jurgen RNAseq project/TopGOanaylsis.R')
# set the working directory
setwd("~/Desktop/Jurgen RNAseq project")
# define the directory with the kallisto output
dir <- "~/Desktop/Jurgen RNAseq project"
# read the csv file containing the metadata
sampleTable <- read_csv("meta_data_LHb.csv")
# get the paths of the files of all the kallisto outputs and test if the files exists
files <- file.path(dir, "without_bootstrap", sampleTable$file_name, "abundance.h5")
names(files) <- sampleTable$sample
file.exists(files)
# the gene map will be the same with all the data frame for annotations
genemap <- read.csv("genemap.csv", header = TRUE, stringsAsFactors = FALSE)
# read in the files with the transcipt ID to gene ID
tx2gene <- read_csv("tx2gene.csv")
# use tximport to combine the abundance files, and conventing the transcript ID to gene ID
txi <- tximport(files, type = "kallisto", tx2gene = tx2gene)
# creating the DESeq object and further analysis
ExpDesign <- ~ genotype + condition + genotype:condition
dds <- DESeqDataSetFromTximport(txi, sampleTable, design = ExpDesign)
# relevel to make sure that the reference is 'WT'
dds$genotype <- relevel(dds$genotype, "WT")
# Pre-filtering out the genes that have too low expression
dds <- dds[ rowSums(counts(dds)) > 25, ]
#creating the dds object
dds <- DESeq(dds)
library()
install.packages("googlesheets")
library(googlesheets)
gs_auth()
gs_ls()
gs_ls()
SCN <- gs_title("SCN_count_ready_for_plot")
countData_SCN <- gs_read_csv(SCN)
countData_SCN$experiment <- as.factor(countData_SCN$experiment)
countData_SCN$experiment <- factor(countData_SCN$experiment,
levels = c("WT-control", "WT-light_induced",
"Per1-control", "Per1-light_induced"))
gs_auth(new_user = TRUE)
ttt <- gs_auth()
View(ttt)
saveRDS(ttt,ttt.rds)
saveRDS(ttt,"ttt.rds")
View(ttt)
gs_auth(token = "ttt.rds")
gs_auth(token = ttt)
sidebarPanel(
inputPanel(
textInput("geneName", label = "Please enter the gene name:", value = "Gnai3")
))
mainPanel(
verticalLayout(
renderPlot({
countDataPlot_SCN <- countData_SCN[countData_SCN$mgi_symbol %in% {input$geneName}, ]
ggplot(countDataPlot_SCN, aes(x=experiment, y = n)) + geom_dotplot(binaxis = "y") + ggtitle("SCN")}),
renderPlot({
countDataPlot_VTA <- countData_VTA[countData_VTA$mgi_symbol %in% {input$geneName}, ]
ggplot(countDataPlot_VTA, aes(x=experiment, y = n)) + geom_dotplot(binaxis = "y") + ggtitle("VTA")}),
renderPlot({
countDataPlot_LHb <- countData_LHb[countData_LHb$mgi_symbol %in% {input$geneName}, ]
ggplot(countDataPlot_LHb, aes(x=experiment, y = n)) + geom_dotplot(binaxis = "y") + ggtitle("LHb")}),
renderPlot({
countDataPlot_NAc <- countData_NAc[countData_NAc$mgi_symbol %in% {input$geneName}, ]
ggplot(countDataPlot_NAc, aes(x=experiment, y = n)) + geom_dotplot(binaxis = "y") + ggtitle("NAc")})
)
)
library(biomaRt)
ensembl <- useMart("ensembl", dataset="mmusculus_gene_ensembl")
goInfo <-getBM(attributes = c("go_id","definition_1006", "name_1006"), mart=ensembl)
sessionInfo()
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(ggplot2)
library(plotly)
# hid the error msg in the final webpage
tags$style(type="text/css", ".shiny-output-error { visibility: hidden; }", ".shiny-output-error:before { visibility: hidden; }")
# load the required data for the plots
Pvalue_SCN <- read.csv("SCN_full_result_table.csv", header = TRUE, stringsAsFactors = FALSE)
Pvalue_VTA <- read.csv("VTA_full_result_table.csv", header = TRUE, stringsAsFactors = FALSE)
Pvalue_LHb <- read.csv("LHb_full_result_table.csv", header = TRUE, stringsAsFactors = FALSE)
Pvalue_NAc <- read.csv("NAc_full_result_table.csv", header = TRUE, stringsAsFactors = FALSE)
brain_region <- c("NAc","LHb","SCN","VTA")
exp_comparsion <- c("WT (control vs Light)", "Per1 (control vs Light)", "WT vs Per1 (control)",
"WT vs Per1 (Light)", "Different of light response between Per1 and WT")
fluidRow(
column(4,
hr(),
selectInput('in1', 'Please choose a brain region ', c(Choose='', brain_region), selectize=FALSE)
),
column(4,
hr(),
selectInput('in2', 'Please choose a comparsion', c(Choose='', exp_comparsion), selectize=FALSE)
)
)
if (input$in1 %in% "SCN"){
selected_brain_region <- Pvalue_SCN
} else if ({input$in1} %in% "VTA") {
selected_brain_region <- Pvalue_VTA
} else if ({input$in1} %in% "LHb"){
selected_brain_region <- Pvalue_LHb
} else if ({input$in1} %in% "NAc") {
selected_brain_region <- Pvalue_NAc
}
knitr::opts_chunk$set(echo = TRUE)
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
Pvalue_SCN <- read.csv("SCN_full_result_table.csv", header = TRUE, stringsAsFactors = FALSE)
Pvalue_SCN <- read.csv("SCN_full_result_table.csv", header = TRUE, stringsAsFactors = FALSE)
setwd("~/Desktop/interactive_vocalo_plot")
Pvalue_SCN <- read.csv("SCN_full_result_table.csv", header = TRUE, stringsAsFactors = FALSE)
Pvalue_SCN <- read.csv("SCN_full_result_table.csv", header = TRUE, stringsAsFactors = FALSE)
Pvalue_VTA <- read.csv("VTA_full_result_table.csv", header = TRUE, stringsAsFactors = FALSE)
Pvalue_LHb <- read.csv("LHb_full_result_table.csv", header = TRUE, stringsAsFactors = FALSE)
Pvalue_NAc <- read.csv("NAc_full_result_table.csv", header = TRUE, stringsAsFactors = FALSE)
Pvalue_SCN$brain_region <- "SCN"
Pvalue_VTA$brain_region <- "VTA"
Pvalue_LHb$brain_region <- "LHb"
Pvalue_NAc$brain_region <- "NAc"
full_table <- rbind(Pvalue_SCN, Pvalue_VTA, Pvalue_LHb, Pvalue_NAc)
write.csv(full_table,"full_table.csv", row.names = FALSE)
