result4$comparsion <- "WT vs Per1 (Light)"
result5$comparsion <- "Different of light response between Per1 and WT"
Fulltable <- rbind(result1, result2, result3, result4, result5)
write.csv(Fulltable,"SCN_full_result_table.csv", row.names = FALSE)
?reorder
colnames(result1)
col_order <- c("comparsion", "baseMean", "log2FoldChange","pvalue","padj","lfcSE","stat","remark",
"ensembl_gene_id","mgi_symbol","description")
Fulltable <- Fulltable[, col_order]
write.csv(Fulltable,"SCN_full_result_table.csv", row.names = FALSE)
# load all the required libraries
library(DESeq2)
library(tximport)
library(readr)
library(ggplot2)
library(vsn)
library(rhdf5)
library(fdrtool)
library(genefilter)
library(gplots)
library(topGO)
library(RColorBrewer)
library(tidyr)
library(dplyr)
source('~/Desktop/Jurgen RNAseq project/add_gene_info.r')
source('~/Desktop/Jurgen RNAseq project/TopGOanaylsis.R')
# set the working directory
setwd("~/Desktop/Jurgen RNAseq project")
# define the directory with the kallisto output
dir <- "~/Desktop/Jurgen RNAseq project"
# read the csv file containing the metadata
sampleTable <- read_csv("meta_data_VTA.csv")
# get the paths of the files of all the kallisto outputs and test if the files exists
files <- file.path(dir, "without_bootstrap", sampleTable$file_name, "abundance.h5")
names(files) <- sampleTable$sample
file.exists(files)
# the gene map will be the same with all the data frame for annotations
genemap <- read.csv("genemap.csv", header = TRUE, stringsAsFactors = FALSE)
# read in the files with the transcipt ID to gene ID
tx2gene <- read_csv("tx2gene.csv")
# use tximport to combine the abundance files, and conventing the transcript ID to gene ID
txi <- tximport(files, type = "kallisto", tx2gene = tx2gene)
# creating the DESeq object and further analysis
ExpDesign <- ~ genotype + condition + genotype:condition
dds <- DESeqDataSetFromTximport(txi, sampleTable, design = ExpDesign)
# relevel to make sure that the reference is 'WT'
dds$genotype <- relevel(dds$genotype, "WT")
# Pre-filtering out the genes that have too low expression
dds <- dds[ rowSums(counts(dds)) > 25, ]
#creating the dds object
dds <- DESeq(dds)
resultsNames(dds)
plotDispEsts( dds, ylim = c(1e-6, 1e1))
res1 <- results(dds, contrast = c("condition", "light_induced", "control"))
result1 <- addGeneInfo(res1, genemap)
res2 <- results(dds, list(c("condition_light_induced_vs_control", "genotypePer1.conditionlight_induced")))
result2 <- addGeneInfo(res2, genemap)
res3 <- results(dds, contrast = c("genotype", "Per1", "WT"))
result3 <- addGeneInfo(res3, genemap)
res4 <- results(dds, list(c("genotype_Per1_vs_WT", "genotypePer1.conditionlight_induced")))
result4 <- addGeneInfo(res4, genemap)
res5 <- results(dds, name = "genotypePer1.conditionlight_induced")
result5 <- addGeneInfo(res5, genemap)
result1$comparsion <- "WT (control vs Light)"
result2$comparsion <- "Per1 (control vs Light)"
result3$comparsion <- "WT vs Per1 (control)"
result4$comparsion <- "WT vs Per1 (Light)"
result5$comparsion <- "Different of light response between Per1 and WT"
Fulltable <- rbind(result1, result2, result3, result4, result5)
col_order <- c("comparsion", "baseMean", "log2FoldChange","pvalue","padj","lfcSE","stat","remark",
"ensembl_gene_id","mgi_symbol","description")
Fulltable <- Fulltable[, col_order]
write.csv(Fulltable,"VTA_full_result_table.csv", row.names = FALSE)
# load all the required libraries
library(DESeq2)
library(tximport)
library(readr)
library(ggplot2)
library(vsn)
library(rhdf5)
library(fdrtool)
library(genefilter)
library(gplots)
library(topGO)
library(RColorBrewer)
library(tidyr)
library(dplyr)
source('~/Desktop/Jurgen RNAseq project/add_gene_info.r')
source('~/Desktop/Jurgen RNAseq project/TopGOanaylsis.R')
# set the working directory
setwd("~/Desktop/Jurgen RNAseq project")
# define the directory with the kallisto output
dir <- "~/Desktop/Jurgen RNAseq project"
# read the csv file containing the metadata
sampleTable <- read_csv("meta_data_LHb.csv")
# get the paths of the files of all the kallisto outputs and test if the files exists
files <- file.path(dir, "without_bootstrap", sampleTable$file_name, "abundance.h5")
names(files) <- sampleTable$sample
file.exists(files)
# the gene map will be the same with all the data frame for annotations
genemap <- read.csv("genemap.csv", header = TRUE, stringsAsFactors = FALSE)
# read in the files with the transcipt ID to gene ID
tx2gene <- read_csv("tx2gene.csv")
# use tximport to combine the abundance files, and conventing the transcript ID to gene ID
txi <- tximport(files, type = "kallisto", tx2gene = tx2gene)
# creating the DESeq object and further analysis
ExpDesign <- ~ genotype + condition + genotype:condition
dds <- DESeqDataSetFromTximport(txi, sampleTable, design = ExpDesign)
# relevel to make sure that the reference is 'WT'
dds$genotype <- relevel(dds$genotype, "WT")
# Pre-filtering out the genes that have too low expression
dds <- dds[ rowSums(counts(dds)) > 25, ]
#creating the dds object
dds <- DESeq(dds)
resultsNames(dds)
plotDispEsts( dds, ylim = c(1e-6, 1e1))
res1 <- results(dds, contrast = c("condition", "light_induced", "control"))
result1 <- addGeneInfo(res1, genemap)
res2 <- results(dds, list(c("condition_light_induced_vs_control", "genotypePer1.conditionlight_induced")))
result2 <- addGeneInfo(res2, genemap)
res3 <- results(dds, contrast = c("genotype", "Per1", "WT"))
result3 <- addGeneInfo(res3, genemap)
res4 <- results(dds, list(c("genotype_Per1_vs_WT", "genotypePer1.conditionlight_induced")))
result4 <- addGeneInfo(res4, genemap)
res5 <- results(dds, name = "genotypePer1.conditionlight_induced")
result5 <- addGeneInfo(res5, genemap)
result1$comparsion <- "WT (control vs Light)"
result2$comparsion <- "Per1 (control vs Light)"
result3$comparsion <- "WT vs Per1 (control)"
result4$comparsion <- "WT vs Per1 (Light)"
result5$comparsion <- "Different of light response between Per1 and WT"
Fulltable <- rbind(result1, result2, result3, result4, result5)
col_order <- c("comparsion", "baseMean", "log2FoldChange","pvalue","padj","lfcSE","stat","remark",
"ensembl_gene_id","mgi_symbol","description")
Fulltable <- Fulltable[, col_order]
write.csv(Fulltable,"LHb_full_result_table.csv", row.names = FALSE)
# load all the required libraries
library(DESeq2)
library(tximport)
library(readr)
library(ggplot2)
library(vsn)
library(rhdf5)
library(fdrtool)
library(genefilter)
library(gplots)
library(topGO)
library(RColorBrewer)
library(tidyr)
library(dplyr)
source('~/Desktop/Jurgen RNAseq project/add_gene_info.r')
source('~/Desktop/Jurgen RNAseq project/TopGOanaylsis.R')
# set the working directory
setwd("~/Desktop/Jurgen RNAseq project")
# define the directory with the kallisto output
dir <- "~/Desktop/Jurgen RNAseq project"
# read the csv file containing the metadata
sampleTable <- read_csv("meta_data_Nac.csv")
# get the paths of the files of all the kallisto outputs and test if the files exists
files <- file.path(dir, "without_bootstrap", sampleTable$file_name, "abundance.h5")
names(files) <- sampleTable$sample
file.exists(files)
# the gene map will be the same with all the data frame for annotations
genemap <- read.csv("genemap.csv", header = TRUE, stringsAsFactors = FALSE)
# read in the files with the transcipt ID to gene ID
tx2gene <- read_csv("tx2gene.csv")
# use tximport to combine the abundance files, and conventing the transcript ID to gene ID
txi <- tximport(files, type = "kallisto", tx2gene = tx2gene)
# creating the DESeq object and further analysis
ExpDesign <- ~ genotype + condition + genotype:condition
dds <- DESeqDataSetFromTximport(txi, sampleTable, design = ExpDesign)
# relevel to make sure that the reference is 'WT'
dds$genotype <- relevel(dds$genotype, "WT")
# Pre-filtering out the genes that have too low expression
dds <- dds[ rowSums(counts(dds)) > 25, ]
#creating the dds object
dds <- DESeq(dds)
resultsNames(dds)
plotDispEsts( dds, ylim = c(1e-6, 1e1))
res1 <- results(dds, contrast = c("condition", "light_induced", "control"))
result1 <- addGeneInfo(res1, genemap)
res2 <- results(dds, list(c("condition_light_induced_vs_control", "genotypePer1.conditionlight_induced")))
result2 <- addGeneInfo(res2, genemap)
res3 <- results(dds, contrast = c("genotype", "Per1", "WT"))
result3 <- addGeneInfo(res3, genemap)
res4 <- results(dds, list(c("genotype_Per1_vs_WT", "genotypePer1.conditionlight_induced")))
result4 <- addGeneInfo(res4, genemap)
res5 <- results(dds, name = "genotypePer1.conditionlight_induced")
result5 <- addGeneInfo(res5, genemap)
result1$comparsion <- "WT (control vs Light)"
result2$comparsion <- "Per1 (control vs Light)"
result3$comparsion <- "WT vs Per1 (control)"
result4$comparsion <- "WT vs Per1 (Light)"
result5$comparsion <- "Different of light response between Per1 and WT"
Fulltable <- rbind(result1, result2, result3, result4, result5)
col_order <- c("comparsion", "baseMean", "log2FoldChange","pvalue","padj","lfcSE","stat","remark",
"ensembl_gene_id","mgi_symbol","description")
Fulltable <- Fulltable[, col_order]
write.csv(Fulltable,"NAc_full_result_table.csv", row.names = FALSE)
Pvalue_SCN <- read.csv("SCN_full_result_table.csv", header = TRUE, stringsAsFactors = FALSE)
Pvalue_SCN$comparsion <- as.factor(Pvalue_SCN$comparsion)
library(ggplot2)
library(plotly)
p1 <- ggplot(Pvalue_SCN, aes(x=log2FoldChange, y= -log10(pvalue)))
p1 + geom_jitter(aes(color = remark)) + facet_grid(comparsion~.)
ggplotly(p1)
p1 <- ggplot(Pvalue_SCN, aes(x=log2FoldChange, y= -log10(pvalue))) + geom_jitter(aes(color = remark)) + facet_grid(comparsion~.)
ggplotly(p1)
p1 <- ggplot(Pvalue_SCN, aes(x=log2FoldChange, y= -log10(pvalue))) + geom_jitter(aes(color = remark, label= mgi_symbol)) + facet_grid(comparsion~.)
p1 <- ggplot(Pvalue_SCN, aes(x=log2FoldChange, y= -log10(pvalue))) + geom_jitter(aes(color = remark, text= mgi_symbol)) + facet_grid(comparsion~.)
library(dplyr)
library(tidyr)
setwd("~/Desktop/data_table")
data <- read.csv("full_data_withGO.csv", header = TRUE, stringsAsFactors = FALSE)
trial <- subset(data, grepl("^,", data$GO_id))
data_go$GO_id <- gsub("^,","",data_go$GO_id)
data$GO_id <- gsub("^,","",data$GO_id)
trial <- subset(data, grepl("^,", data$GO_id))
trial <- subset(data, grepl(",,", data$GO_id))
data$GO_id <- gsub(",,",",",data$GO_id)
trial <- subset(data, grepl(",,", data$GO_id))
trial <- subset(data, grepl(", ", data$GO_id))
trial <- subset(data, grepl(",^", data$GO_id))
trial <- subset(data, grepl(",$", data$GO_id))
View(trial)
data$GO_id <- gsub(",$","",data$GO_id)
trial <- subset(data, grepl(",$", data$GO_id))
write.csv(data,"full_data_withGO.csv", row.names = FALSE)
library(readr)
full_table_p_value <- read_csv("full_table_p_value.csv")
View(full_table_p_value)
setwd("~/Desktop/brainRNASeq/R_analysis/input_doc")
library(dplyr)
library(tidyr)
# load the database with the GO description
setwd("~/Desktop/brainRNASeq/R_analysis/input_doc")
gene.info <- read.csv("gene_info_database.csv", header = TRUE, stringsAsFactors = FALSE)
# GO <- read.csv("GO_description.csv", header = TRUE, stringsAsFactors = FALSE)
setwd("~/Desktop/brainRNASeq/R_analysis/R_output/results_tables")
SCN.data <- read.csv("SCN/SCN_all_comparsion.csv", header = TRUE, stringsAsFactors = FALSE)
VTA.data <- read.csv("VTA/VTA_all_comparsion.csv", header = TRUE, stringsAsFactors = FALSE)
NAc.data <- read.csv("NAc/NAc_all_comparsion.csv", header = TRUE, stringsAsFactors = FALSE)
LHb.data <- read.csv("LHb/LHb_all_comparsion.csv", header = TRUE, stringsAsFactors = FALSE)
# adding the brain_region column
SCN.data$brain_region <- "SCN"
VTA.data$brain_region <- "VTA"
NAc.data$brain_region <- "NAc"
LHb.data$brain_region <- "LHb"
# combine the results from different brain regions
full.data <- rbind(SCN.data, VTA.data, NAc.data, LHb.data)
gene2GO <- select(gene.info, go_id, ensembl_gene_id)
gene2GO <- unique(gene2GO)
gene2GO.newformat <- gene2GO %>% group_by(ensembl_gene_id) %>% mutate(All_GO_id = paste(go_id, collapse = ","))
gene2GO.newformat <- select(gene2GO.newformat, -go_id)
gene2GO.newformat <- unique(gene2GO.newformat)
ungroup(gene2GO.newformat)
gene2GO.newformat <- unique(gene2GO.newformat)
gene2GO.newformat <- as.data.frame(gene2GO.newformat)
head(gene2GO.newformat)
View(gene2GO.newformat)
gene2GO.newformat <- gene2GO %>% group_by(ensembl_gene_id) %>% mutate(All_GO_id = paste(go_id, collapse = ", "))
gene2GO.newformat <- select(gene2GO.newformat, -go_id)
gene2GO.newformat <- unique(gene2GO.newformat)
ungroup(gene2GO.newformat)
gene2GO.newformat <- unique(gene2GO.newformat)
gene2GO.newformat <- as.data.frame(gene2GO.newformat)
View(gene2GO.newformat)
data.with.GO <- left_join(full.data, gene2GO.newformat, by="ensembl_gene_id")
colnames(data_go)[13] <-"GO_id"
colnames(data.with.GO)[13] <-"GO_id"
column.order <- c("baseMean","log2FoldChange","pvalue","padj","lfcSE","stat",
"remark","ensembl_gene_id","mgi_symbol","description",
"GO_id","brain_region","comparsion")
data.with.GO <- data.with.GO[ ,column.order]
setwd("~/Desktop/brainRNASeq/InteractiveApps/data_table")
write.csv(data.with.GO,"full_data_withGO.csv", row.names = FALSE)
source('~/Desktop/brainRNASeq/InteractiveApps/interactive_vocalo_plot/joining_full_table.R')
source('~/Desktop/brainRNASeq/InteractiveApps/interactive_volcano_plot/joining_full_table.R')
setwd("~/Desktop/brainRNASeq/InteractiveApps/interactive_volcano_plot")
write.csv(full.table,"full_table.csv", row.names = FALSE)
write.csv(full.data,"full_table.csv", row.names = FALSE)
library(readr)
VTA_count_ready_for_plot <- read_csv("~/Desktop/brainRNASeq/InteractiveApps/Interactive_graph/VTA_count_ready_for_plot.csv")
View(VTA_count_ready_for_plot)
library(readr)
SCN_count_ready_for_plot <- read_csv("~/Desktop/brainRNASeq/InteractiveApps/Interactive_graph/SCN_count_ready_for_plot.csv")
View(SCN_count_ready_for_plot)
setwd("~/Desktop/brainRNASeq/InteractiveApps/Interactive_graph")
source('~/Desktop/brainRNASeq/InteractiveApps/Interactive_graph/output_tidy_count_data_for_plot.R')
library(readr)
NAc_count_ready_for_plot <- read_csv("NAc_count_ready_for_plot.csv")
View(NAc_count_ready_for_plot)
library(tidyr)
library(dplyr)
library(readr)
source('~/Desktop/brainRNASeq/InteractiveApps/Interactive_graph/generate_count_data_for_plot.R')
setwd("~/Desktop/brainRNASeq/R_analysis/input_doc")
# Table with the gene annotations
gene.info <- read.csv("gene_info_database.csv", header = TRUE, stringsAsFactors = FALSE)
# read the csv files containing the metadata
metadata.SCN <- read_csv("meta_data_SCN.csv")
setwd("~/Desktop/brainRNASeq/R_analysis/R_output/results_tables")
countData.SCN <- read.csv("SCN/SCN_normalized_gene_counts.csv",header = TRUE, stringsAsFactors = FALSE)
countData.plot.SCN <- generateCountDataForPlot(metadata.SCN, gene.info, countData.SCN)
View(countData.SCN)
rm(countData.plot.SCN)
colnames(countData.SCN)[1] <- "ensembl_gene_id"
count.data <- gather(countData.SCN, key = "sample", counts, 2:length(metadata$sample))
count.data <- gather(countData.SCN, key = "sample", counts, 2:length(metadata.SCN$sample))
count.data <- gather(countData.SCN, key = "sample", counts, 2:24)
count.data <- gather(countData.SCN, key = "sample", counts, 2:25)
source('~/Desktop/brainRNASeq/InteractiveApps/Interactive_graph/output_tidy_count_data_for_plot.R')
source('~/Desktop/brainRNASeq/InteractiveApps/Interactive_graph/output_tidy_count_data_for_plot.R')
library(dplyr)
library(tidyr)
setwd("~/Desktop/brainRNASeq/R_analysis/R_output/results_tables")
SCN.data <- read.csv("SCN/SCN_all_comparsion.csv", header = TRUE, stringsAsFactors = FALSE)
VTA.data <- read.csv("VTA/VTA_all_comparsion.csv", header = TRUE, stringsAsFactors = FALSE)
NAc.data <- read.csv("NAc/NAc_all_comparsion.csv", header = TRUE, stringsAsFactors = FALSE)
LHb.data <- read.csv("LHb/LHb_all_comparsion.csv", header = TRUE, stringsAsFactors = FALSE)
# adding the brain_region column
SCN.data$brain_region <- "SCN"
VTA.data$brain_region <- "VTA"
NAc.data$brain_region <- "NAc"
LHb.data$brain_region <- "LHb"
# combine the results from different brain regions
full.data <- rbind(SCN.data, VTA.data, NAc.data, LHb.data)
column.order <- c("baseMean","log2FoldChange","pvalue","padj","lfcSE","stat",
"remark","comparsion", "ensembl_gene_id","mgi_symbol","description",
"brain_region")
full.data <- full.data[ ,column.order]
setwd("~/Desktop/brainRNASeq/InteractiveApps/Interactive_graph")
write.csv(full.data,"full_data.csv", row.names = FALSE)
countDataPlot_SCN <- countData_SCN[countData_SCN$mgi_symbol %in% "Gpr88", ]
p <- ggplot(countDataPlot_SCN, aes(x=experiment, y = counts))
p <- p + geom_boxplot() + geom_point(aes(Animal = animal, Sample = sample)) + ggtitle("SCN")
library(tidyr)
library(dplyr)
library(ggplot2)
factorize <- function(df){
# This function is to change the experiment column to factor and relevel accordingly
df$experiment <- as.factor(df$experiment)
df$experiment <- factor(df$experiment,levels = c("WT-control",
"WT-light_induced",
"Per1-control",
"Per1-light_induced"))
return(df)
}
reshape_output <- function(df){
# This function is to reshape the dataframe for showing the normalized count
# columns to be removed: ensembl_gene_id, region, mgi_sybmol, genotype, condition
df <- select(df, -c(ensembl_gene_id, region, mgi_symbol, genotype, condition, sample))
#change the animal to numbers
df$animal <- as.integer(c(1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6))
# reshape the table from long from to wide form
df <- spread(df, key = experiment , value = counts)
return(df)
}
# read in the data table with the p-value of all the brain region and experimental
# comparsion
Pvalue_table <- read.csv("full_data.csv", header = TRUE, stringsAsFactors = FALSE)
# read in the data table with the normalized count data from each brain region
countData_SCN <- read.csv("SCN_count_ready_for_plot.csv", header = TRUE,
stringsAsFactors = FALSE)
countData_VTA <- read.csv("VTA_count_ready_for_plot.csv", header = TRUE,
stringsAsFactors = FALSE)
countData_LHb <- read.csv("LHb_count_ready_for_plot.csv", header = TRUE,
stringsAsFactors = FALSE)
countData_NAc <- read.csv("NAc_count_ready_for_plot.csv", header = TRUE,
stringsAsFactors = FALSE)
# relevel the experiment column for each dataframe
countData_SCN <- factorize(countData_SCN)
countData_VTA <- factorize(countData_VTA)
countData_LHb <- factorize(countData_LHb)
countData_NAc <- factorize(countData_NAc)
```
countDataPlot_SCN <- countData_SCN[countData_SCN$mgi_symbol %in% "Gpr88", ]
p <- ggplot(countDataPlot_SCN, aes(x=experiment, y = counts))
p <- p + geom_boxplot() + geom_point(aes(Animal = animal, Sample = sample)) + ggtitle("SCN")
countDataPlot_SCN <- countData_SCN[countData_SCN$mgi_symbol %in% "Gpr88", ]
p <- ggplot(countDataPlot_SCN, aes(x=experiment, y = counts))
p <- p + geom_boxplot() + geom_point() + ggtitle("SCN")
p
p <- xlab("Normalized counts")+ ggtitle("SCN")
p
p <- p + xlab("Normalized counts")+ ggtitle("SCN")
p
p <- p + ggtitle("SCN") + xlab("Experiment") + ylab("Normalized counts")
p
p <- p + theme_classic()
p
p <- p + theme_bw()
p
p <- p + theme_minimal()
p
p <- p + theme_classic()
p
library(tidyr)
library(dplyr)
library(ggplot2)
factorize <- function(df){
# This function is to change the experiment column to factor and relevel accordingly
df$experiment <- as.factor(df$experiment)
df$experiment <- factor(df$experiment,levels = c("WT-control",
"WT-light_induced",
"Per1-control",
"Per1-light_induced"))
return(df)
}
reshape_output <- function(df){
# This function is to reshape the dataframe for showing the normalized count
# columns to be removed: ensembl_gene_id, region, mgi_sybmol, genotype, condition
df <- select(df, -c(ensembl_gene_id, region, mgi_symbol, genotype, condition, sample))
#change the animal to numbers
df$animal <- as.integer(c(1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6))
# reshape the table from long from to wide form
df <- spread(df, key = experiment , value = counts)
return(df)
}
# read in the data table with the p-value of all the brain region and experimental
# comparsion
Pvalue_table <- read.csv("full_data.csv", header = TRUE, stringsAsFactors = FALSE)
library(tidyr)
library(dplyr)
library(ggplot2)
factorize <- function(df){
# This function is to change the experiment column to factor and relevel accordingly
df$experiment <- as.factor(df$experiment)
df$experiment <- factor(df$experiment,levels = c("WT-control",
"WT-light_induced",
"Per1-control",
"Per1-light_induced"))
return(df)
}
reshape_output <- function(df){
# This function is to reshape the dataframe for showing the normalized count
# columns to be removed: ensembl_gene_id, region, mgi_sybmol, genotype, condition
df <- select(df, -c(ensembl_gene_id, region, mgi_symbol, genotype, condition, sample))
#change the animal to numbers
df$animal <- as.integer(c(1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6))
# reshape the table from long from to wide form
df <- spread(df, key = experiment , value = counts)
return(df)
}
# read in the data table with the p-value of all the brain region and experimental
# comparsion
Pvalue_table <- read.csv("full_data.csv", header = TRUE, stringsAsFactors = FALSE)
# read in the data table with the normalized count data from each brain region
countData_SCN <- read.csv("SCN_count_ready_for_plot.csv", header = TRUE,
stringsAsFactors = FALSE)
countData_VTA <- read.csv("VTA_count_ready_for_plot.csv", header = TRUE,
stringsAsFactors = FALSE)
countData_LHb <- read.csv("LHb_count_ready_for_plot.csv", header = TRUE,
stringsAsFactors = FALSE)
countData_NAc <- read.csv("NAc_count_ready_for_plot.csv", header = TRUE,
stringsAsFactors = FALSE)
# relevel the experiment column for each dataframe
countData_SCN <- factorize(countData_SCN)
countData_VTA <- factorize(countData_VTA)
countData_LHb <- factorize(countData_LHb)
countData_NAc <- factorize(countData_NAc)
library(tidyr)
library(dplyr)
library(ggplot2)
factorize <- function(df){
# This function is to change the experiment column to factor and relevel accordingly
df$experiment <- as.factor(df$experiment)
df$experiment <- factor(df$experiment,levels = c("WT-control",
"WT-light_induced",
"Per1-control",
"Per1-light_induced"))
return(df)
}
# read in the data table with the normalized count data from each brain region
countData_SCN <- read.csv("SCN_count_ready_for_plot.csv", header = TRUE,
stringsAsFactors = FALSE)
countData_VTA <- read.csv("VTA_count_ready_for_plot.csv", header = TRUE,
stringsAsFactors = FALSE)
countData_LHb <- read.csv("LHb_count_ready_for_plot.csv", header = TRUE,
stringsAsFactors = FALSE)
countData_NAc <- read.csv("NAc_count_ready_for_plot.csv", header = TRUE,
stringsAsFactors = FALSE)
# relevel the experiment column for each dataframe
countData_SCN <- factorize(countData_SCN)
countData_VTA <- factorize(countData_VTA)
countData_LHb <- factorize(countData_LHb)
countData_NAc <- factorize(countData_NAc)
countDataPlot_SCN <- countData_SCN[countData_SCN$mgi_symbol %in% "Gpr88", ]
p <- ggplot(countDataPlot_SCN, aes(x=experiment, y = counts))
p <- p + geom_boxplot() + geom_point()
p <- p + ggtitle("SCN") + xlab("Experiment") + ylab("Normalized counts")
p <- p + theme_classic()
p
countDataPlot_VTA <- countData_VTA[countData_VTA$mgi_symbol %in% "Gpr88", ]
p2 <- ggplot(countDataPlot_VTA, aes(x=experiment, y = counts))
p2 <- p2 + geom_boxplot() + geom_point()
p2 <- p2 + ggtitle("VTA") + xlab("Experiment") + ylab("Normalized counts")
p2 <- p2 + theme_classic()
p2
countDataPlot_LHb <- countData_LHb[countData_LHb$mgi_symbol %in% "Gpr88", ]
p3 <- ggplot(countDataPlot_LHb, aes(x=experiment, y = counts))
p3 <- p3 + geom_boxplot() + geom_point()
p3 <- p3 + ggtitle("LHb") + xlab("Experiment") + ylab("Normalized counts")
p3 <- p3 + theme_classic()
p3
countDataPlot_NAc <- countData_NAc[countData_NAc$mgi_symbol %in% "Gpr88", ]
p4 <- ggplot(countDataPlot_NAc, aes(x=experiment, y = counts))
p4 <- p4 + geom_boxplot() + geom_point()
p4 <- p4 + ggtitle("NAc") + xlab("Experiment") + ylab("Normalized counts")
p4 <- p4 + theme_classic()
p4
setwd("~/Desktop/brainRNASeq/InteractiveApps/Interactive_graph")
