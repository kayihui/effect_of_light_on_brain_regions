install.packages("plotly")
?plotOutput
library(shiny)
?plotOutput
runApp('~/Desktop/Testing')
runApp('~/Desktop/Testing')
runApp('~/Desktop/Testing')
runApp('~/Desktop/Testing')
runApp('~/Desktop/Testing')
Sys.setenv("plotly_username"="kayi.ripperger")
Sys.setenv("plotly_api_key"="F1cAR3SSrubDiQAMpNum")
runApp('~/Desktop/Testing')
runApp('~/Desktop/Testing')
runApp('~/Desktop/Testing')
install.packages("tippy")
runApp('~/Desktop/Testing')
runApp('~/Desktop/Testing')
runApp('~/Desktop/Testing')
runApp('~/Desktop/Testing')
install.packages("tippy")
install.packages("tippy")
shiny::runApp('~/Desktop/Testing')
runApp('~/Desktop/Testing')
runApp('~/Desktop/Testing')
runApp('~/Desktop/Testing')
runApp('~/Desktop/Testing')
runApp('~/Desktop/Testing')
runApp('~/Desktop/Testing')
runApp('~/Desktop/Testing')
runApp('~/Desktop/Testing')
runApp('~/Desktop/Testing')
runApp('~/Desktop/Testing')
runApp('~/Desktop/Testing')
runApp('~/Desktop/Testing')
runApp('~/Desktop/Testing')
runApp('~/Desktop/test2')
runApp('~/Desktop/Testing')
runApp('~/Desktop/Testing')
runApp('~/Desktop/Testing')
runApp('~/Desktop/Testing')
runApp('~/Desktop/Testing')
runApp('~/Desktop/Testing')
runApp('~/Desktop/test2')
runApp('~/Desktop/Testing')
runApp('~/Desktop/Testing')
runApp('~/Desktop/Testing')
runApp('~/Desktop/Testing')
runApp('~/Desktop/Testing')
?geom_point
?ggplotly
countData_SCN <- read.csv("SCN_count_ready_for_plot.csv", header = TRUE, stringsAsFactors = FALSE)
# load all the required libraries
library(DESeq2)
library(tximport)
library(readr)
library(ggplot2)
library(vsn)
library(rhdf5)
library(fdrtool)
library(genefilter)
library(gplots)
library(topGO)
library(RColorBrewer)
library(tidyr)
library(dplyr)
source('~/Desktop/Jurgen RNAseq project/add_gene_info.r')
source('~/Desktop/Jurgen RNAseq project/TopGOanaylsis.R')
# set the working directory
setwd("~/Desktop/Jurgen RNAseq project")
# define the directory with the kallisto output
dir <- "~/Desktop/Jurgen RNAseq project"
# read the csv file containing the metadata
sampleTable <- read_csv("meta_data_SCN.csv")
# get the paths of the files of all the kallisto outputs and test if the files exists
files <- file.path(dir, "without_bootstrap", sampleTable$file_name, "abundance.h5")
names(files) <- sampleTable$sample
file.exists(files)
# the gene map will be the same with all the data frame for annotations
genemap <- read.csv("genemap.csv", header = TRUE, stringsAsFactors = FALSE)
# read in the files with the transcipt ID to gene ID
tx2gene <- read_csv("tx2gene.csv")
# use tximport to combine the abundance files, and conventing the transcript ID to gene ID
txi <- tximport(files, type = "kallisto", tx2gene = tx2gene)
# creating the DESeq object and further analysis
ExpDesign <- ~ genotype + condition + genotype:condition
dds <- DESeqDataSetFromTximport(txi, sampleTable, design = ExpDesign)
# relevel to make sure that the reference is 'WT'
dds$genotype <- relevel(dds$genotype, "WT")
# Pre-filtering out the genes that have too low expression
dds <- dds[ rowSums(counts(dds)) > 25, ]
#creating the dds object
dds <- DESeq(dds)
resultsNames(dds)
plotDispEsts( dds, ylim = c(1e-6, 1e1))
# Result table 1
res1 <- results(dds, contrast = c("condition", "light_induced", "control"))
plotMA(res1, ylim = c(-2, 2))
metadata(res1)$filterThreshold
plot(metadata(res1)$filterNumRej, xlab="quantile of baseMean", ylab="number of rejections")
hist(res1$pvalue, breaks = 20, col ='grey', main = "The effect of light on WT", xlab = "pvalue", ylab = "Frequency")
# adding annonations to the result table
result1 <- addGeneInfo(res1, genemap)
summary(result1$remark)
# Volcano plot
g <- ggplot(result1, aes(x=log2FoldChange, y= -log10(pvalue)))
g + geom_jitter(aes(color = remark)) + ggtitle("WT(control Vs light induced) Volcano plot")
res2 <- results(dds, list(c("condition_light_induced_vs_control", "genotypePer1.conditionlight_induced")))
# Result table 2
plotMA(res2, ylim = c(-2, 2))
metadata(res2)$filterThreshold
plot(metadata(res2)$filterNumRej, xlab="quantile of baseMean", ylab="number of rejections")
hist(res2$pvalue, breaks = 20, col ='grey', main = "Per1 (control Vs light induced)", xlab = "pvalue", ylab = "Frequency")
# adding annonations to the result table
result2 <- addGeneInfo(res2, genemap)
summary(result2$remark)
# Volcano plot
g2 <- ggplot(result2, aes(x=log2FoldChange, y= -log10(pvalue)))
g2 + geom_jitter(aes(color = remark)) + ggtitle("Per1 (control Vs light induced) Volcano plot")
# Result table 3
res3 <- results(dds, contrast = c("genotype", "Per1", "WT"))
plotMA(res3, ylim = c(-2, 2))
metadata(res3)$filterThreshold
plot(metadata(res3)$filterNumRej, xlab="quantile of baseMean", ylab="number of rejections")
hist(res3$pvalue, breaks = 20, col ='grey', main = "WT vs Per1 (control)", xlab = "pvalue", ylab = "Frequency")
# adding annonations to the result table
result3 <- addGeneInfo(res3, genemap)
summary(result3$remark)
# Volcano plot
g3 <- ggplot(result3, aes(x=log2FoldChange, y= -log10(pvalue)))
g3 + geom_jitter(aes(color = remark)) + ggtitle("WT vs Per1 (control) Volcano plot")
res4 <- results(dds, list(c("genotype_Per1_vs_WT", "genotypePer1.conditionlight_induced")))
plotMA(res4, ylim = c(-2, 2))
metadata(res4)$filterThreshold
plot(metadata(res4)$filterNumRej, xlab="quantile of baseMean", ylab="number of rejections")
hist(res4$pvalue, breaks = 20, col ='grey', main = "WT vs Per1 (light)", xlab = "pvalue", ylab = "Frequency")
# adding annonations to the result table
result4 <- addGeneInfo(res4, genemap)
summary(result4$remark)
# Volcano plot
g4 <- ggplot(result4, aes(x=log2FoldChange, y= -log10(pvalue)))
g4 + geom_jitter(aes(color = remark)) + ggtitle("WT vs Per1 (light) Volcano plot")
res5 <- results(dds, name = "genotypePer1.conditionlight_induced")
plotMA(res5, ylim = c(-2, 2))
metadata(res5)$filterThreshold
plot(metadata(res5)$filterNumRej, xlab="quantile of baseMean", ylab="number of rejections")
hist(res5$pvalue, breaks = 20, col ='grey', main = "The different response in genotypes", xlab = "pvalue", ylab = "Frequency")
# adding annonations to the result table
result5 <- addGeneInfo(res5, genemap)
summary(result5$remark)
# Volcano plot
g5 <- ggplot(result5, aes(x=log2FoldChange, y= -log10(pvalue)))
g5 + geom_jitter(aes(color = remark)) + ggtitle("Difference of light response in Per1 vs WT Volcano plot")
resultsNames(res1)
View(res1)
View(res1)
?DESeq
View(dds)
res1
result1$comparsion <- "WT (control vs Light)"
result2$comparsion <- "Per1 (control vs Light)"
result3$comparsion <- "WT vs Per1 (control)"
result4$comparsion <- "WT vs Per1 (Light)"
result5$comparsion <- "Different of light response between Per1 and WT"
Fulltable <- rbind(result1, result2, result3, result4, result5)
write.csv(Fulltable,"SCN_full_result_table.csv", row.names = FALSE)
?reorder
colnames(result1)
col_order <- c("comparsion", "baseMean", "log2FoldChange","pvalue","padj","lfcSE","stat","remark",
"ensembl_gene_id","mgi_symbol","description")
Fulltable <- Fulltable[, col_order]
write.csv(Fulltable,"SCN_full_result_table.csv", row.names = FALSE)
# load all the required libraries
library(DESeq2)
library(tximport)
library(readr)
library(ggplot2)
library(vsn)
library(rhdf5)
library(fdrtool)
library(genefilter)
library(gplots)
library(topGO)
library(RColorBrewer)
library(tidyr)
library(dplyr)
source('~/Desktop/Jurgen RNAseq project/add_gene_info.r')
source('~/Desktop/Jurgen RNAseq project/TopGOanaylsis.R')
# set the working directory
setwd("~/Desktop/Jurgen RNAseq project")
# define the directory with the kallisto output
dir <- "~/Desktop/Jurgen RNAseq project"
# read the csv file containing the metadata
sampleTable <- read_csv("meta_data_VTA.csv")
# get the paths of the files of all the kallisto outputs and test if the files exists
files <- file.path(dir, "without_bootstrap", sampleTable$file_name, "abundance.h5")
names(files) <- sampleTable$sample
file.exists(files)
# the gene map will be the same with all the data frame for annotations
genemap <- read.csv("genemap.csv", header = TRUE, stringsAsFactors = FALSE)
# read in the files with the transcipt ID to gene ID
tx2gene <- read_csv("tx2gene.csv")
# use tximport to combine the abundance files, and conventing the transcript ID to gene ID
txi <- tximport(files, type = "kallisto", tx2gene = tx2gene)
# creating the DESeq object and further analysis
ExpDesign <- ~ genotype + condition + genotype:condition
dds <- DESeqDataSetFromTximport(txi, sampleTable, design = ExpDesign)
# relevel to make sure that the reference is 'WT'
dds$genotype <- relevel(dds$genotype, "WT")
# Pre-filtering out the genes that have too low expression
dds <- dds[ rowSums(counts(dds)) > 25, ]
#creating the dds object
dds <- DESeq(dds)
resultsNames(dds)
plotDispEsts( dds, ylim = c(1e-6, 1e1))
res1 <- results(dds, contrast = c("condition", "light_induced", "control"))
result1 <- addGeneInfo(res1, genemap)
res2 <- results(dds, list(c("condition_light_induced_vs_control", "genotypePer1.conditionlight_induced")))
result2 <- addGeneInfo(res2, genemap)
res3 <- results(dds, contrast = c("genotype", "Per1", "WT"))
result3 <- addGeneInfo(res3, genemap)
res4 <- results(dds, list(c("genotype_Per1_vs_WT", "genotypePer1.conditionlight_induced")))
result4 <- addGeneInfo(res4, genemap)
res5 <- results(dds, name = "genotypePer1.conditionlight_induced")
result5 <- addGeneInfo(res5, genemap)
result1$comparsion <- "WT (control vs Light)"
result2$comparsion <- "Per1 (control vs Light)"
result3$comparsion <- "WT vs Per1 (control)"
result4$comparsion <- "WT vs Per1 (Light)"
result5$comparsion <- "Different of light response between Per1 and WT"
Fulltable <- rbind(result1, result2, result3, result4, result5)
col_order <- c("comparsion", "baseMean", "log2FoldChange","pvalue","padj","lfcSE","stat","remark",
"ensembl_gene_id","mgi_symbol","description")
Fulltable <- Fulltable[, col_order]
write.csv(Fulltable,"VTA_full_result_table.csv", row.names = FALSE)
# load all the required libraries
library(DESeq2)
library(tximport)
library(readr)
library(ggplot2)
library(vsn)
library(rhdf5)
library(fdrtool)
library(genefilter)
library(gplots)
library(topGO)
library(RColorBrewer)
library(tidyr)
library(dplyr)
source('~/Desktop/Jurgen RNAseq project/add_gene_info.r')
source('~/Desktop/Jurgen RNAseq project/TopGOanaylsis.R')
# set the working directory
setwd("~/Desktop/Jurgen RNAseq project")
# define the directory with the kallisto output
dir <- "~/Desktop/Jurgen RNAseq project"
# read the csv file containing the metadata
sampleTable <- read_csv("meta_data_LHb.csv")
# get the paths of the files of all the kallisto outputs and test if the files exists
files <- file.path(dir, "without_bootstrap", sampleTable$file_name, "abundance.h5")
names(files) <- sampleTable$sample
file.exists(files)
# the gene map will be the same with all the data frame for annotations
genemap <- read.csv("genemap.csv", header = TRUE, stringsAsFactors = FALSE)
# read in the files with the transcipt ID to gene ID
tx2gene <- read_csv("tx2gene.csv")
# use tximport to combine the abundance files, and conventing the transcript ID to gene ID
txi <- tximport(files, type = "kallisto", tx2gene = tx2gene)
# creating the DESeq object and further analysis
ExpDesign <- ~ genotype + condition + genotype:condition
dds <- DESeqDataSetFromTximport(txi, sampleTable, design = ExpDesign)
# relevel to make sure that the reference is 'WT'
dds$genotype <- relevel(dds$genotype, "WT")
# Pre-filtering out the genes that have too low expression
dds <- dds[ rowSums(counts(dds)) > 25, ]
#creating the dds object
dds <- DESeq(dds)
resultsNames(dds)
plotDispEsts( dds, ylim = c(1e-6, 1e1))
res1 <- results(dds, contrast = c("condition", "light_induced", "control"))
result1 <- addGeneInfo(res1, genemap)
res2 <- results(dds, list(c("condition_light_induced_vs_control", "genotypePer1.conditionlight_induced")))
result2 <- addGeneInfo(res2, genemap)
res3 <- results(dds, contrast = c("genotype", "Per1", "WT"))
result3 <- addGeneInfo(res3, genemap)
res4 <- results(dds, list(c("genotype_Per1_vs_WT", "genotypePer1.conditionlight_induced")))
result4 <- addGeneInfo(res4, genemap)
res5 <- results(dds, name = "genotypePer1.conditionlight_induced")
result5 <- addGeneInfo(res5, genemap)
result1$comparsion <- "WT (control vs Light)"
result2$comparsion <- "Per1 (control vs Light)"
result3$comparsion <- "WT vs Per1 (control)"
result4$comparsion <- "WT vs Per1 (Light)"
result5$comparsion <- "Different of light response between Per1 and WT"
Fulltable <- rbind(result1, result2, result3, result4, result5)
col_order <- c("comparsion", "baseMean", "log2FoldChange","pvalue","padj","lfcSE","stat","remark",
"ensembl_gene_id","mgi_symbol","description")
Fulltable <- Fulltable[, col_order]
write.csv(Fulltable,"LHb_full_result_table.csv", row.names = FALSE)
# load all the required libraries
library(DESeq2)
library(tximport)
library(readr)
library(ggplot2)
library(vsn)
library(rhdf5)
library(fdrtool)
library(genefilter)
library(gplots)
library(topGO)
library(RColorBrewer)
library(tidyr)
library(dplyr)
source('~/Desktop/Jurgen RNAseq project/add_gene_info.r')
source('~/Desktop/Jurgen RNAseq project/TopGOanaylsis.R')
# set the working directory
setwd("~/Desktop/Jurgen RNAseq project")
# define the directory with the kallisto output
dir <- "~/Desktop/Jurgen RNAseq project"
# read the csv file containing the metadata
sampleTable <- read_csv("meta_data_Nac.csv")
# get the paths of the files of all the kallisto outputs and test if the files exists
files <- file.path(dir, "without_bootstrap", sampleTable$file_name, "abundance.h5")
names(files) <- sampleTable$sample
file.exists(files)
# the gene map will be the same with all the data frame for annotations
genemap <- read.csv("genemap.csv", header = TRUE, stringsAsFactors = FALSE)
# read in the files with the transcipt ID to gene ID
tx2gene <- read_csv("tx2gene.csv")
# use tximport to combine the abundance files, and conventing the transcript ID to gene ID
txi <- tximport(files, type = "kallisto", tx2gene = tx2gene)
# creating the DESeq object and further analysis
ExpDesign <- ~ genotype + condition + genotype:condition
dds <- DESeqDataSetFromTximport(txi, sampleTable, design = ExpDesign)
# relevel to make sure that the reference is 'WT'
dds$genotype <- relevel(dds$genotype, "WT")
# Pre-filtering out the genes that have too low expression
dds <- dds[ rowSums(counts(dds)) > 25, ]
#creating the dds object
dds <- DESeq(dds)
resultsNames(dds)
plotDispEsts( dds, ylim = c(1e-6, 1e1))
res1 <- results(dds, contrast = c("condition", "light_induced", "control"))
result1 <- addGeneInfo(res1, genemap)
res2 <- results(dds, list(c("condition_light_induced_vs_control", "genotypePer1.conditionlight_induced")))
result2 <- addGeneInfo(res2, genemap)
res3 <- results(dds, contrast = c("genotype", "Per1", "WT"))
result3 <- addGeneInfo(res3, genemap)
res4 <- results(dds, list(c("genotype_Per1_vs_WT", "genotypePer1.conditionlight_induced")))
result4 <- addGeneInfo(res4, genemap)
res5 <- results(dds, name = "genotypePer1.conditionlight_induced")
result5 <- addGeneInfo(res5, genemap)
result1$comparsion <- "WT (control vs Light)"
result2$comparsion <- "Per1 (control vs Light)"
result3$comparsion <- "WT vs Per1 (control)"
result4$comparsion <- "WT vs Per1 (Light)"
result5$comparsion <- "Different of light response between Per1 and WT"
Fulltable <- rbind(result1, result2, result3, result4, result5)
col_order <- c("comparsion", "baseMean", "log2FoldChange","pvalue","padj","lfcSE","stat","remark",
"ensembl_gene_id","mgi_symbol","description")
Fulltable <- Fulltable[, col_order]
write.csv(Fulltable,"NAc_full_result_table.csv", row.names = FALSE)
Pvalue_SCN <- read.csv("SCN_full_result_table.csv", header = TRUE, stringsAsFactors = FALSE)
Pvalue_SCN$comparsion <- as.factor(Pvalue_SCN$comparsion)
library(ggplot2)
library(plotly)
p1 <- ggplot(Pvalue_SCN, aes(x=log2FoldChange, y= -log10(pvalue)))
p1 + geom_jitter(aes(color = remark)) + facet_grid(comparsion~.)
ggplotly(p1)
p1 <- ggplot(Pvalue_SCN, aes(x=log2FoldChange, y= -log10(pvalue))) + geom_jitter(aes(color = remark)) + facet_grid(comparsion~.)
ggplotly(p1)
p1 <- ggplot(Pvalue_SCN, aes(x=log2FoldChange, y= -log10(pvalue))) + geom_jitter(aes(color = remark, label= mgi_symbol)) + facet_grid(comparsion~.)
p1 <- ggplot(Pvalue_SCN, aes(x=log2FoldChange, y= -log10(pvalue))) + geom_jitter(aes(color = remark, text= mgi_symbol)) + facet_grid(comparsion~.)
library(dplyr)
library(tidyr)
setwd("~/Desktop/data_table")
data <- read.csv("full_data_withGO.csv", header = TRUE, stringsAsFactors = FALSE)
trial <- subset(data, grepl("^,", data$GO_id))
data_go$GO_id <- gsub("^,","",data_go$GO_id)
data$GO_id <- gsub("^,","",data$GO_id)
trial <- subset(data, grepl("^,", data$GO_id))
trial <- subset(data, grepl(",,", data$GO_id))
data$GO_id <- gsub(",,",",",data$GO_id)
trial <- subset(data, grepl(",,", data$GO_id))
trial <- subset(data, grepl(", ", data$GO_id))
trial <- subset(data, grepl(",^", data$GO_id))
trial <- subset(data, grepl(",$", data$GO_id))
View(trial)
data$GO_id <- gsub(",$","",data$GO_id)
trial <- subset(data, grepl(",$", data$GO_id))
write.csv(data,"full_data_withGO.csv", row.names = FALSE)
setwd("~/Desktop/brainRNASeq/InteractiveApps/data_table_VTA2")
source('~/Desktop/brainRNASeq/InteractiveApps/data_table_VTA2/join_data_with_GO.R')
